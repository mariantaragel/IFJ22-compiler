.IFJcode22
# TMP VARS START
    DEFVAR GF@_tmp
    DEFVAR GF@_tmp_res
    DEFVAR GF@_tmp_type
    DEFVAR GF@_arg_count
    DEFVAR GF@_rhs
    DEFVAR GF@_lhs
    DEFVAR GF@_tlhs
    DEFVAR GF@_trhs
    DEFVAR GF@_aux1
# TMP VARS END

# DEFINE USED VARS START
    DEFVAR GF@$sum
    DEFVAR GF@$in
    DEFVAR GF@$a
    DEFVAR GF@$b
# DEFINE USED VARS END

# EXPR ASS START
    # CHECK EXPR VARS DEFS START
    # CHECK EXPR VARS DEFS END

    PUSHS int@0
    POPS GF@$sum
# EXPR ASS END

# FUNC ASS START
    # CHECK FUNC ARG INIT START
    # CHECK FUNC ARG INIT END

    PUSHS int@0
    CALL reads
    POPS GF@$in
# FUNC ASS END

# WHILE START
    # CHECK WHILE COND VARS DEFS START
        TYPE GF@_tmp GF@$in
        JUMPIFNEQ ?$in?var_init_ok_1 GF@_tmp string@
        EXIT int@5
        LABEL ?$in?var_init_ok_1
    # CHECK WHILE COND VARS DEFS END

    LABEL ?while_start_1
    PUSHS nil@nil
    PUSHS GF@$in
    CALL &neq_op
    CALL &to_bool
    POPS GF@_tmp_res
    JUMPIFEQ ?while_end_1 GF@_tmp_res bool@false
    # FUNC ASS START
        # CHECK FUNC ARG INIT START
            TYPE GF@_tmp GF@$in
            JUMPIFNEQ ?$in?var_init_ok_2 GF@_tmp string@
            EXIT int@5
            LABEL ?$in?var_init_ok_2
        # CHECK FUNC ARG INIT END

        PUSHS int@1
        PUSHS int@0
        PUSHS GF@$in
        PUSHS int@3
        CALL substring
        POPS GF@$a
    # FUNC ASS END

    # FUNC ASS START
        # CHECK FUNC ARG INIT START
            TYPE GF@_tmp GF@$in
            JUMPIFNEQ ?$in?var_init_ok_3 GF@_tmp string@
            EXIT int@5
            LABEL ?$in?var_init_ok_3
        # CHECK FUNC ARG INIT END

        PUSHS int@3
        PUSHS int@2
        PUSHS GF@$in
        PUSHS int@3
        CALL substring
        POPS GF@$b
    # FUNC ASS END

    # FUNC ASS START
        # CHECK FUNC ARG INIT START
            TYPE GF@_tmp GF@$a
            JUMPIFNEQ ?$a?var_init_ok_4 GF@_tmp string@
            EXIT int@5
            LABEL ?$a?var_init_ok_4
        # CHECK FUNC ARG INIT END

        PUSHS GF@$a
        PUSHS int@1
        CALL ord
        POPS GF@$a
    # FUNC ASS END

    # FUNC ASS START
        # CHECK FUNC ARG INIT START
            TYPE GF@_tmp GF@$b
            JUMPIFNEQ ?$b?var_init_ok_5 GF@_tmp string@
            EXIT int@5
            LABEL ?$b?var_init_ok_5
        # CHECK FUNC ARG INIT END

        PUSHS GF@$b
        PUSHS int@1
        CALL ord
        POPS GF@$b
    # FUNC ASS END

    # EXPR ASS START
        # CHECK EXPR VARS DEFS START
            TYPE GF@_tmp GF@$a
            JUMPIFNEQ ?$a?var_init_ok_6 GF@_tmp string@
            EXIT int@5
            LABEL ?$a?var_init_ok_6
        # CHECK EXPR VARS DEFS END

        PUSHS int@65
        PUSHS GF@$a
        CALL &sub_op
        POPS GF@$a
    # EXPR ASS END

    # EXPR ASS START
        # CHECK EXPR VARS DEFS START
            TYPE GF@_tmp GF@$b
            JUMPIFNEQ ?$b?var_init_ok_7 GF@_tmp string@
            EXIT int@5
            LABEL ?$b?var_init_ok_7
        # CHECK EXPR VARS DEFS END

        PUSHS int@88
        PUSHS GF@$b
        CALL &sub_op
        POPS GF@$b
    # EXPR ASS END

    # EXPR ASS START
        # CHECK EXPR VARS DEFS START
            TYPE GF@_tmp GF@$b
            JUMPIFNEQ ?$b?var_init_ok_8 GF@_tmp string@
            EXIT int@5
            LABEL ?$b?var_init_ok_8
            TYPE GF@_tmp GF@$sum
            JUMPIFNEQ ?$sum?var_init_ok_9 GF@_tmp string@
            EXIT int@5
            LABEL ?$sum?var_init_ok_9
        # CHECK EXPR VARS DEFS END

        PUSHS int@1
        PUSHS GF@$b
        PUSHS GF@$sum
        CALL &add_op
        CALL &add_op
        POPS GF@$sum
    # EXPR ASS END

    # IF START
        # CHECK IF COND VARS DEFS START
            TYPE GF@_tmp GF@$b
            JUMPIFNEQ ?$b?var_init_ok_10 GF@_tmp string@
            EXIT int@5
            LABEL ?$b?var_init_ok_10
            TYPE GF@_tmp GF@$a
            JUMPIFNEQ ?$a?var_init_ok_11 GF@_tmp string@
            EXIT int@5
            LABEL ?$a?var_init_ok_11
        # CHECK IF COND VARS DEFS END

        PUSHS GF@$b
        PUSHS GF@$a
        CALL &eq_op
        CALL &to_bool
        POPS GF@_tmp_res
        JUMPIFEQ ?if_branch_false_1 GF@_tmp_res bool@false
        # EXPR ASS START
            # CHECK EXPR VARS DEFS START
                TYPE GF@_tmp GF@$sum
                JUMPIFNEQ ?$sum?var_init_ok_12 GF@_tmp string@
                EXIT int@5
                LABEL ?$sum?var_init_ok_12
            # CHECK EXPR VARS DEFS END

            PUSHS int@3
            PUSHS GF@$sum
            CALL &add_op
            POPS GF@$sum
        # EXPR ASS END

        JUMP ?if_end_1
        LABEL ?if_branch_false_1
        # IF START
            # CHECK IF COND VARS DEFS START
                TYPE GF@_tmp GF@$a
                JUMPIFNEQ ?$a?var_init_ok_13 GF@_tmp string@
                EXIT int@5
                LABEL ?$a?var_init_ok_13
            # CHECK IF COND VARS DEFS END

            PUSHS int@0
            PUSHS GF@$a
            CALL &eq_op
            CALL &to_bool
            POPS GF@_tmp_res
            JUMPIFEQ ?if_branch_false_2 GF@_tmp_res bool@false
            # IF START
                # CHECK IF COND VARS DEFS START
                    TYPE GF@_tmp GF@$b
                    JUMPIFNEQ ?$b?var_init_ok_14 GF@_tmp string@
                    EXIT int@5
                    LABEL ?$b?var_init_ok_14
                # CHECK IF COND VARS DEFS END

                PUSHS int@1
                PUSHS GF@$b
                CALL &eq_op
                CALL &to_bool
                POPS GF@_tmp_res
                JUMPIFEQ ?if_branch_false_3 GF@_tmp_res bool@false
                # EXPR ASS START
                    # CHECK EXPR VARS DEFS START
                        TYPE GF@_tmp GF@$sum
                        JUMPIFNEQ ?$sum?var_init_ok_15 GF@_tmp string@
                        EXIT int@5
                        LABEL ?$sum?var_init_ok_15
                    # CHECK EXPR VARS DEFS END

                    PUSHS int@6
                    PUSHS GF@$sum
                    CALL &add_op
                    POPS GF@$sum
                # EXPR ASS END

                JUMP ?if_end_3
                LABEL ?if_branch_false_3
                LABEL ?if_end_3
            # IF END

            JUMP ?if_end_2
            LABEL ?if_branch_false_2
            LABEL ?if_end_2
        # IF END

        # IF START
            # CHECK IF COND VARS DEFS START
                TYPE GF@_tmp GF@$a
                JUMPIFNEQ ?$a?var_init_ok_16 GF@_tmp string@
                EXIT int@5
                LABEL ?$a?var_init_ok_16
            # CHECK IF COND VARS DEFS END

            PUSHS int@1
            PUSHS GF@$a
            CALL &eq_op
            CALL &to_bool
            POPS GF@_tmp_res
            JUMPIFEQ ?if_branch_false_4 GF@_tmp_res bool@false
            # IF START
                # CHECK IF COND VARS DEFS START
                    TYPE GF@_tmp GF@$b
                    JUMPIFNEQ ?$b?var_init_ok_17 GF@_tmp string@
                    EXIT int@5
                    LABEL ?$b?var_init_ok_17
                # CHECK IF COND VARS DEFS END

                PUSHS int@2
                PUSHS GF@$b
                CALL &eq_op
                CALL &to_bool
                POPS GF@_tmp_res
                JUMPIFEQ ?if_branch_false_5 GF@_tmp_res bool@false
                # EXPR ASS START
                    # CHECK EXPR VARS DEFS START
                        TYPE GF@_tmp GF@$sum
                        JUMPIFNEQ ?$sum?var_init_ok_18 GF@_tmp string@
                        EXIT int@5
                        LABEL ?$sum?var_init_ok_18
                    # CHECK EXPR VARS DEFS END

                    PUSHS int@6
                    PUSHS GF@$sum
                    CALL &add_op
                    POPS GF@$sum
                # EXPR ASS END

                JUMP ?if_end_5
                LABEL ?if_branch_false_5
                LABEL ?if_end_5
            # IF END

            JUMP ?if_end_4
            LABEL ?if_branch_false_4
            LABEL ?if_end_4
        # IF END

        # IF START
            # CHECK IF COND VARS DEFS START
                TYPE GF@_tmp GF@$a
                JUMPIFNEQ ?$a?var_init_ok_19 GF@_tmp string@
                EXIT int@5
                LABEL ?$a?var_init_ok_19
            # CHECK IF COND VARS DEFS END

            PUSHS int@2
            PUSHS GF@$a
            CALL &eq_op
            CALL &to_bool
            POPS GF@_tmp_res
            JUMPIFEQ ?if_branch_false_6 GF@_tmp_res bool@false
            # IF START
                # CHECK IF COND VARS DEFS START
                    TYPE GF@_tmp GF@$b
                    JUMPIFNEQ ?$b?var_init_ok_20 GF@_tmp string@
                    EXIT int@5
                    LABEL ?$b?var_init_ok_20
                # CHECK IF COND VARS DEFS END

                PUSHS int@0
                PUSHS GF@$b
                CALL &eq_op
                CALL &to_bool
                POPS GF@_tmp_res
                JUMPIFEQ ?if_branch_false_7 GF@_tmp_res bool@false
                # EXPR ASS START
                    # CHECK EXPR VARS DEFS START
                        TYPE GF@_tmp GF@$sum
                        JUMPIFNEQ ?$sum?var_init_ok_21 GF@_tmp string@
                        EXIT int@5
                        LABEL ?$sum?var_init_ok_21
                    # CHECK EXPR VARS DEFS END

                    PUSHS int@6
                    PUSHS GF@$sum
                    CALL &add_op
                    POPS GF@$sum
                # EXPR ASS END

                JUMP ?if_end_7
                LABEL ?if_branch_false_7
                LABEL ?if_end_7
            # IF END

            JUMP ?if_end_6
            LABEL ?if_branch_false_6
            LABEL ?if_end_6
        # IF END

        LABEL ?if_end_1
    # IF END

    # FUNC ASS START
        # CHECK FUNC ARG INIT START
        # CHECK FUNC ARG INIT END

        PUSHS int@0
        CALL reads
        POPS GF@$in
    # FUNC ASS END

    JUMP ?while_start_1
    LABEL ?while_end_1
# WHILE END

# STANDALONE FUNC CALL START
    # CHECK FUNC ARG INIT START
        TYPE GF@_tmp GF@$sum
        JUMPIFNEQ ?$sum?var_init_ok_22 GF@_tmp string@
        EXIT int@5
        LABEL ?$sum?var_init_ok_22
    # CHECK FUNC ARG INIT END

    PUSHS string@\010
    PUSHS GF@$sum
    PUSHS int@2
    CALL write
    POPS GF@_tmp_res
# STANDALONE FUNC CALL END

EXIT int@0

# USER FUNCTIONS START
# USER FUNCTIONS END

# BUILT IN FUNCTIONS START
LABEL reads												
CREATEFRAME												
PUSHFRAME												
	# check if number of arguments is 0					
		POPS GF@_arg_count								
		JUMPIFEQ ?reads?arg_count_ok GF@_arg_count int@0
			EXIT int@4									
		LABEL ?reads?arg_count_ok						
														
	# read string from input							
		DEFVAR LF@read_string							
		READ LF@read_string string						
		PUSHS LF@read_string							
POPFRAME												
RETURN													

LABEL readi												
CREATEFRAME												
PUSHFRAME												
	# check if number of arguments is 0					
		POPS GF@_arg_count								
		JUMPIFEQ ?readi?arg_count_ok GF@_arg_count int@0
			EXIT int@4									
		LABEL ?readi?arg_count_ok						
														
	# read int from input								
		DEFVAR LF@read_int								
		READ LF@read_int int							
		PUSHS LF@read_int								
POPFRAME												
RETURN													

LABEL readf												
CREATEFRAME												
PUSHFRAME												
	# check if number of arguments is 0					
		POPS GF@_arg_count								
		JUMPIFEQ ?readf?arg_count_ok GF@_arg_count int@0
			EXIT int@4									
		LABEL ?readf?arg_count_ok						
														
	# read float from input								
		DEFVAR LF@read_float							
		READ LF@read_float float						
		PUSHS LF@read_float								
POPFRAME												
RETURN													

LABEL write												
CREATEFRAME												
PUSHFRAME												
	DEFVAR LF@cur_arg									
														
	# get number of arguments							
	POPS GF@_arg_count									
														
	# iterate over all arguments and print them			
	LABEL ?write?while_start							
	JUMPIFEQ ?write?while_end GF@_arg_count int@0		
														
		SUB GF@_arg_count GF@_arg_count int@1			
		POPS LF@cur_arg									
		WRITE LF@cur_arg								
														
	JUMP ?write?while_start								
	LABEL ?write?while_end								
														
	# return implicit null								
	PUSHS nil@nil										
POPFRAME												
RETURN													

LABEL floatval											
	# check if number of arguments is 1					
	POPS GF@_arg_count									
	JUMPIFEQ ?floatval?arg_count_ok GF@_arg_count int@1	
		EXIT int@4										
	LABEL ?floatval?arg_count_ok						
														
	# get argument										
	POPS GF@_tmp										
														
	TYPE GF@_tmp_type GF@_tmp							
														
	JUMPIFNEQ ?floatval?next1 GF@_tmp_type string@nil	
		MOVE GF@_tmp_res float@0x0p+0					
		JUMP ?floatval?end								
														
	LABEL ?floatval?next1								
	JUMPIFNEQ ?floatval?next2 GF@_tmp_type string@int	
		INT2FLOAT GF@_tmp_res GF@_tmp					
		JUMP ?floatval?end								
														
	LABEL ?floatval?next2								
	JUMPIFNEQ ?floatval?next3 GF@_tmp_type string@float	
		MOVE GF@_tmp_res GF@_tmp						
		JUMP ?floatval?end								
														
	LABEL ?floatval?next3								
	JUMPIFNEQ ?floatval?next4 GF@_tmp_type string@string
		EXIT int@8										
														
	LABEL ?floatval?next4								
		JUMPIFEQ ?floatval?false GF@_tmp bool@false		
			MOVE GF@_tmp_res float@0x1p+0				
			JUMP ?floatval?end							
		LABEL ?floatval?false							
			MOVE GF@_tmp_res float@0x0p+0				
														
	LABEL ?floatval?end									
	PUSHS GF@_tmp_res									
RETURN													

LABEL intval											
	# check if number of arguments is 1					
	POPS GF@_arg_count									
	JUMPIFEQ ?intval?arg_count_ok GF@_arg_count int@1	
		EXIT int@4										
	LABEL ?intval?arg_count_ok							
														
	# get argument										
	POPS GF@_tmp										
														
	TYPE GF@_tmp_type GF@_tmp							
														
	JUMPIFNEQ ?intval?next1 GF@_tmp_type string@nil		
		MOVE GF@_tmp_res int@0							
		JUMP ?intval?end								
														
	LABEL ?intval?next1									
	JUMPIFNEQ ?intval?next2 GF@_tmp_type string@int		
		MOVE GF@_tmp_res GF@_tmp						
		JUMP ?intval?end								
														
	LABEL ?intval?next2									
	JUMPIFNEQ ?intval?next3 GF@_tmp_type string@float	
		FLOAT2INT GF@_tmp_res GF@_tmp					
		JUMP ?intval?end								
														
	LABEL ?intval?next3									
	JUMPIFNEQ ?intval?next4 GF@_tmp_type string@string	
		EXIT int@8										
														
	LABEL ?intval?next4									
		JUMPIFEQ ?intval?false GF@_tmp bool@false		
			MOVE GF@_tmp_res int@1						
			JUMP ?intval?end							
		LABEL ?intval?false								
			MOVE GF@_tmp_res int@0						
														
	LABEL ?intval?end									
	PUSHS GF@_tmp_res									
RETURN													

LABEL strval											
	# check if number of arguments is 1					
	POPS GF@_arg_count									
	JUMPIFEQ ?strval?arg_count_ok GF@_arg_count int@1	
		EXIT int@4										
	LABEL ?strval?arg_count_ok							
														
	# get argument										
	POPS GF@_tmp										
														
	TYPE GF@_tmp_type GF@_tmp							
														
	JUMPIFNEQ ?strval?next1 GF@_tmp_type string@nil		
		MOVE GF@_tmp_res string@						
		JUMP ?strval?end								
														
	LABEL ?strval?next1									
	JUMPIFNEQ ?strval?next2 GF@_tmp_type string@int		
		EXIT int@8										
														
	LABEL ?strval?next2									
	JUMPIFNEQ ?strval?next3 GF@_tmp_type string@float	
		EXIT int@8										
														
	LABEL ?strval?next3									
	JUMPIFNEQ ?strval?next4 GF@_tmp_type string@string	
		MOVE GF@_tmp_res GF@_tmp						
		JUMP ?strval?end								
														
	LABEL ?strval?next4									
		JUMPIFEQ ?strval?false GF@_tmp bool@false		
			MOVE GF@_tmp_res string@1					
			JUMP ?strval?end							
		LABEL ?strval?false								
			MOVE GF@_tmp_res string@					
														
	LABEL ?strval?end									
	PUSHS GF@_tmp_res									
RETURN													

LABEL strlen													
	# check if number of arguments is 1							
	POPS GF@_arg_count											
	JUMPIFEQ ?strlen?arg_count_ok GF@_arg_count int@1			
		EXIT int@4												
	LABEL ?strlen?arg_count_ok									
																
	# get argument												
	POPS GF@_tmp												
																
	# check if parameter type is string							
	TYPE GF@_tmp_type GF@_tmp									
	JUMPIFEQ ?strlen?param_type_ok GF@_tmp_type string@string	
		EXIT int@4												
	LABEL ?strlen?param_type_ok									
																
	# get and return length of string							
	STRLEN GF@_tmp GF@_tmp										
	PUSHS GF@_tmp												
RETURN															

LABEL substring														
CREATEFRAME															
PUSHFRAME															
	# check if number of arguments is 3								
	POPS GF@_arg_count												
	JUMPIFEQ ?substring?arg_count_ok GF@_arg_count int@3			
		EXIT int@4													
	LABEL ?substring?arg_count_ok									
																	
	DEFVAR LF@str													
	POPS LF@str														
	TYPE GF@_tmp_type LF@str										
	JUMPIFEQ ?substring?str?param_type_ok GF@_tmp_type string@string
		EXIT int@4													
	LABEL ?substring?str?param_type_ok								
																	
	DEFVAR LF@i														
	POPS LF@i														
	TYPE GF@_tmp_type LF@i											
	JUMPIFEQ ?substring?i?param_type_ok GF@_tmp_type string@int		
		EXIT int@4													
	LABEL ?substring?i?param_type_ok								
																	
	DEFVAR LF@j														
	POPS LF@j														
	TYPE GF@_tmp_type LF@j											
	JUMPIFEQ ?substring?j?param_type_ok GF@_tmp_type string@int		
		EXIT int@4													
	LABEL ?substring?j?param_type_ok								
																	
	LT GF@_tmp LF@i int@0 # if i < 0 return null					
	JUMPIFEQ ?substring?return_null GF@_tmp bool@true				
																	
	LT GF@_tmp LF@j int@0 # if j < 0								
	JUMPIFEQ ?substring?return_null GF@_tmp bool@true				
																	
	GT GF@_tmp LF@i LF@j # if i > j return null						
	JUMPIFEQ ?substring?return_null GF@_tmp bool@true				
																	
	STRLEN GF@_tmp_res LF@str										
	GT GF@_tmp LF@j GF@_tmp_res # if j > strlen(s) return null		
	JUMPIFEQ ?substring?return_null GF@_tmp bool@true				
	GT GF@_tmp LF@i GF@_tmp_res # if i > strlen(s) return null		
	JUMPIFEQ ?substring?return_null GF@_tmp bool@true				
	EQ GF@_tmp LF@i GF@_tmp_res # if i = strlen(s) return null		
	JUMPIFEQ ?substring?return_null GF@_tmp bool@true				
																	
	MOVE GF@_tmp_res string@										
																	
	LABEL ?substring?while_start									
	JUMPIFEQ ?substring?while_end LF@i LF@j							
																	
		GETCHAR GF@_tmp LF@str LF@i									
		CONCAT GF@_tmp_res GF@_tmp_res GF@_tmp						
		ADD LF@i LF@i int@1											
																	
	JUMP ?substring?while_start										
	LABEL ?substring?while_end										
																	
	PUSHS GF@_tmp_res												
	POPFRAME														
	RETURN															
																	
	LABEL ?substring?return_null									
	PUSHS nil@nil													
	POPFRAME														
	RETURN															

LABEL ord														
	# check if number of arguments is 1							
	POPS GF@_arg_count											
	JUMPIFEQ ?ord?arg_count_ok GF@_arg_count int@1				
		EXIT int@4												
	LABEL ?ord?arg_count_ok										
																
	# get argument												
	POPS GF@_tmp												
																
	# check if parameter type is string							
	TYPE GF@_tmp_type GF@_tmp									
	JUMPIFEQ ?ord?param_type_ok GF@_tmp_type string@string		
		EXIT int@4												
	LABEL ?ord?param_type_ok									
																
	# check if string is not empty								
	JUMPIFEQ ?ord?empty_string GF@_tmp string@					
																
	# string is not empty, return ASCII value of first character
	STRI2INT GF@_tmp GF@_tmp int@0								
	PUSHS GF@_tmp												
	RETURN														
																
	# string is empty, return zero								
	LABEL ?ord?empty_string										
	PUSHS int@0													
	RETURN														

LABEL chr														
	# check if number of arguments is 1							
	POPS GF@_arg_count											
	JUMPIFEQ ?chr?arg_count_ok GF@_arg_count int@1				
		EXIT int@4												
	LABEL ?chr?arg_count_ok										
																
	# get argument												
	POPS GF@_tmp												
																
	# check if parameter type is int							
	TYPE GF@_tmp_type GF@_tmp									
	JUMPIFEQ ?chr?param_type_ok GF@_tmp_type string@int			
		EXIT int@4												
	LABEL ?chr?param_type_ok									
																
	# get and return length of string							
	INT2CHAR GF@_tmp GF@_tmp									
	PUSHS GF@_tmp												
RETURN															

# BUILT IN FUNCTIONS END

# HELPER FUNCTIONS START
LABEL &to_bool											
	POPS GF@_tmp										
	TYPE GF@_tmp_type GF@_tmp							
														
	JUMPIFNEQ ?&to_bool?next1 GF@_tmp_type string@nil	
		JUMP ?&to_bool?false							
														
	LABEL ?&to_bool?next1								
	JUMPIFNEQ ?&to_bool?next2 GF@_tmp_type string@int	
		JUMPIFEQ ?&to_bool?false GF@_tmp int@0			
		JUMP ?&to_bool?true								
														
	LABEL ?&to_bool?next2								
	JUMPIFNEQ ?&to_bool?next3 GF@_tmp_type string@float	
		JUMPIFEQ ?&to_bool?false GF@_tmp float@0x0p+0	
		JUMP ?&to_bool?true								
														
	LABEL ?&to_bool?next3								
	JUMPIFNEQ ?&to_bool?next4 GF@_tmp_type string@string
		JUMPIFEQ ?&to_bool?false GF@_tmp string@		
		JUMPIFEQ ?&to_bool?false GF@_tmp string@0		
		JUMP ?&to_bool?true								
														
	LABEL ?&to_bool?next4								
		JUMPIFEQ ?&to_bool?false GF@_tmp bool@false		
														
	LABEL ?&to_bool?true								
		PUSHS bool@true									
		RETURN											
														
	LABEL ?&to_bool?false								
		PUSHS bool@false								
		RETURN											

LABEL &add_op
POPS GF@_lhs
TYPE GF@_tlhs GF@_lhs
JUMPIFNEQ ?type_ok_1 GF@_tlhs string@string
EXIT int@7
LABEL ?type_ok_1
JUMPIFNEQ ?skip_nil_conversion_1 GF@_tlhs string@nil
MOVE GF@_lhs int@0
LABEL ?skip_nil_conversion_1
TYPE GF@_tlhs GF@_lhs
POPS GF@_rhs
TYPE GF@_trhs GF@_rhs
JUMPIFNEQ ?type_ok_2 GF@_trhs string@string
EXIT int@7
LABEL ?type_ok_2
JUMPIFNEQ ?skip_nil_conversion_2 GF@_trhs string@nil
MOVE GF@_rhs int@0
LABEL ?skip_nil_conversion_2
TYPE GF@_trhs GF@_rhs
JUMPIFEQ ?add_op?execute GF@_tlhs GF@_trhs
JUMPIFEQ ?add_op?convert_rhs GF@_tlhs string@float
INT2FLOAT GF@_lhs GF@_lhs
JUMP ?add_op?execute
LABEL ?add_op?convert_rhs
INT2FLOAT GF@_rhs GF@_rhs
LABEL ?add_op?execute
ADD GF@_lhs GF@_lhs GF@_rhs
PUSHS GF@_lhs
RETURN



LABEL &mul_op
POPS GF@_lhs
TYPE GF@_tlhs GF@_lhs
JUMPIFNEQ ?type_ok_3 GF@_tlhs string@string
EXIT int@7
LABEL ?type_ok_3
JUMPIFNEQ ?skip_nil_conversion_3 GF@_tlhs string@nil
MOVE GF@_lhs int@0
LABEL ?skip_nil_conversion_3
TYPE GF@_tlhs GF@_lhs
POPS GF@_rhs
TYPE GF@_trhs GF@_rhs
JUMPIFNEQ ?type_ok_4 GF@_trhs string@string
EXIT int@7
LABEL ?type_ok_4
JUMPIFNEQ ?skip_nil_conversion_4 GF@_trhs string@nil
MOVE GF@_rhs int@0
LABEL ?skip_nil_conversion_4
TYPE GF@_trhs GF@_rhs
JUMPIFEQ ?mul_op?execute GF@_tlhs GF@_trhs
JUMPIFEQ ?mul_op?convert_rhs GF@_tlhs string@float
INT2FLOAT GF@_lhs GF@_lhs
JUMP ?mul_op?execute
LABEL ?mul_op?convert_rhs
INT2FLOAT GF@_rhs GF@_rhs
LABEL ?mul_op?execute
MUL GF@_lhs GF@_lhs GF@_rhs
PUSHS GF@_lhs
RETURN



LABEL &sub_op
POPS GF@_lhs
TYPE GF@_tlhs GF@_lhs
JUMPIFNEQ ?type_ok_5 GF@_tlhs string@string
EXIT int@7
LABEL ?type_ok_5
JUMPIFNEQ ?skip_nil_conversion_5 GF@_tlhs string@nil
MOVE GF@_lhs int@0
LABEL ?skip_nil_conversion_5
TYPE GF@_tlhs GF@_lhs
POPS GF@_rhs
TYPE GF@_trhs GF@_rhs
JUMPIFNEQ ?type_ok_6 GF@_trhs string@string
EXIT int@7
LABEL ?type_ok_6
JUMPIFNEQ ?skip_nil_conversion_6 GF@_trhs string@nil
MOVE GF@_rhs int@0
LABEL ?skip_nil_conversion_6
TYPE GF@_trhs GF@_rhs
JUMPIFEQ ?sub_op?execute GF@_tlhs GF@_trhs
JUMPIFEQ ?sub_op?convert_rhs GF@_tlhs string@float
INT2FLOAT GF@_lhs GF@_lhs
JUMP ?sub_op?execute
LABEL ?sub_op?convert_rhs
INT2FLOAT GF@_rhs GF@_rhs
LABEL ?sub_op?execute
SUB GF@_lhs GF@_lhs GF@_rhs
PUSHS GF@_lhs
RETURN



LABEL &div_op
POPS GF@_lhs
TYPE GF@_tlhs GF@_lhs
JUMPIFNEQ ?type_ok_7 GF@_tlhs string@string
EXIT int@7
LABEL ?type_ok_7
JUMPIFNEQ ?skip_nil_conversion_7 GF@_tlhs string@nil
MOVE GF@_lhs int@0
LABEL ?skip_nil_conversion_7
TYPE GF@_tlhs GF@_lhs
JUMPIFEQ ?skip_int_conversion_23 GF@_tlhs string@float
INT2FLOAT GF@_lhs GF@_lhs
LABEL ?skip_int_conversion_23
POPS GF@_rhs
TYPE GF@_trhs GF@_rhs
JUMPIFNEQ ?type_ok_8 GF@_trhs string@string
EXIT int@7
LABEL ?type_ok_8
JUMPIFNEQ ?skip_nil_conversion_8 GF@_trhs string@nil
MOVE GF@_rhs int@0
LABEL ?skip_nil_conversion_8
TYPE GF@_trhs GF@_rhs
JUMPIFEQ ?skip_int_conversion_24 GF@_trhs string@float
INT2FLOAT GF@_rhs GF@_rhs
LABEL ?skip_int_conversion_24
DIV GF@_lhs GF@_lhs GF@_rhs
PUSHS GF@_lhs
RETURN
LABEL &concat_op
POPS GF@_lhs
TYPE GF@_tlhs GF@_lhs
JUMPIFEQ ?type_ok_9 GF@_tlhs string@string
JUMPIFEQ ?type_ok_9 GF@_tlhs string@nil
EXIT int@7
LABEL ?type_ok_9
JUMPIFNEQ ?skip_nil_conversion_9 GF@_tlhs string@nil
MOVE GF@_lhs string@
LABEL ?skip_nil_conversion_9
TYPE GF@_tlhs GF@_lhs
POPS GF@_rhs
TYPE GF@_trhs GF@_rhs
JUMPIFEQ ?type_ok_10 GF@_trhs string@string
JUMPIFEQ ?type_ok_10 GF@_trhs string@nil
EXIT int@7
LABEL ?type_ok_10
JUMPIFNEQ ?skip_nil_conversion_10 GF@_trhs string@nil
MOVE GF@_rhs string@
LABEL ?skip_nil_conversion_10
TYPE GF@_trhs GF@_rhs
CONCAT GF@_lhs GF@_lhs GF@_rhs
PUSHS GF@_lhs
RETURN



LABEL &eq_op
POPS GF@_lhs
TYPE GF@_tlhs GF@_lhs
JUMPIFNEQ ?type_ok_11 GF@_tlhs string@bool
EXIT int@7
LABEL ?type_ok_11
POPS GF@_rhs
TYPE GF@_trhs GF@_rhs
JUMPIFNEQ ?type_ok_12 GF@_trhs string@bool
EXIT int@7
LABEL ?type_ok_12
JUMPIFEQ ?eq_op?execute GF@_tlhs GF@_trhs
MOVE GF@_lhs bool@false
JUMP ?eq_op?end
LABEL ?eq_op?execute
EQ GF@_lhs GF@_lhs GF@_rhs
LABEL ?eq_op?end
PUSHS GF@_lhs
RETURN



LABEL &neq_op
POPS GF@_lhs
TYPE GF@_tlhs GF@_lhs
JUMPIFNEQ ?type_ok_13 GF@_tlhs string@bool
EXIT int@7
LABEL ?type_ok_13
POPS GF@_rhs
TYPE GF@_trhs GF@_rhs
JUMPIFNEQ ?type_ok_14 GF@_trhs string@bool
EXIT int@7
LABEL ?type_ok_14
JUMPIFEQ ?neq_op?execute GF@_tlhs GF@_trhs
MOVE GF@_lhs bool@true
JUMP ?neq_op?end
LABEL ?neq_op?execute
EQ GF@_lhs GF@_lhs GF@_rhs
NOT GF@_lhs GF@_lhs
LABEL ?neq_op?end
PUSHS GF@_lhs
RETURN



LABEL &lt_op
POPS GF@_lhs
TYPE GF@_tlhs GF@_lhs
JUMPIFNEQ ?type_ok_15 GF@_tlhs string@bool
EXIT int@7
LABEL ?type_ok_15
POPS GF@_rhs
TYPE GF@_trhs GF@_rhs
JUMPIFNEQ ?type_ok_16 GF@_trhs string@bool
EXIT int@7
LABEL ?type_ok_16
JUMPIFNEQ ?lt_op?lhs_not_nil GF@_tlhs string@nil
MOVE GF@_lhs bool@false
JUMP ?lt_op?end
LABEL ?lt_op?lhs_not_nil
JUMPIFNEQ ?lt_op?rhs_not_nil GF@_trhs string@nil
MOVE GF@_lhs bool@false
JUMP ?lt_op?end
LABEL ?lt_op?rhs_not_nil
JUMPIFEQ ?lt_op?execute GF@_tlhs GF@_trhs
JUMPIFNEQ ?lt_op?lhs_not_string GF@_tlhs string@string
MOVE GF@_lhs bool@false
JUMP ?lt_op?end
LABEL ?lt_op?lhs_not_string
JUMPIFNEQ ?lt_op?rhs_not_string GF@_trhs string@string
MOVE GF@_lhs bool@false
JUMP ?lt_op?end
LABEL ?lt_op?rhs_not_string
JUMPIFNEQ ?lt_op?skip_lhs_cast GF@_tlhs string@int
INT2FLOAT GF@_lhs GF@_lhs
LABEL ?lt_op?skip_lhs_cast
JUMPIFNEQ ?lt_op?skip_rhs_cast GF@_trhs string@int
INT2FLOAT GF@_rhs GF@_rhs
LABEL ?lt_op?skip_rhs_cast
LABEL ?lt_op?execute
LT GF@_lhs GF@_lhs GF@_rhs
LABEL ?lt_op?end
PUSHS GF@_lhs
RETURN



LABEL &gt_op
POPS GF@_lhs
TYPE GF@_tlhs GF@_lhs
JUMPIFNEQ ?type_ok_17 GF@_tlhs string@bool
EXIT int@7
LABEL ?type_ok_17
POPS GF@_rhs
TYPE GF@_trhs GF@_rhs
JUMPIFNEQ ?type_ok_18 GF@_trhs string@bool
EXIT int@7
LABEL ?type_ok_18
JUMPIFNEQ ?gt_op?lhs_not_nil GF@_tlhs string@nil
MOVE GF@_lhs bool@false
JUMP ?gt_op?end
LABEL ?gt_op?lhs_not_nil
JUMPIFNEQ ?gt_op?rhs_not_nil GF@_trhs string@nil
MOVE GF@_lhs bool@false
JUMP ?gt_op?end
LABEL ?gt_op?rhs_not_nil
JUMPIFEQ ?gt_op?execute GF@_tlhs GF@_trhs
JUMPIFNEQ ?gt_op?lhs_not_string GF@_tlhs string@string
MOVE GF@_lhs bool@false
JUMP ?gt_op?end
LABEL ?gt_op?lhs_not_string
JUMPIFNEQ ?gt_op?rhs_not_string GF@_trhs string@string
MOVE GF@_lhs bool@false
JUMP ?gt_op?end
LABEL ?gt_op?rhs_not_string
JUMPIFNEQ ?gt_op?skip_lhs_cast GF@_tlhs string@int
INT2FLOAT GF@_lhs GF@_lhs
LABEL ?gt_op?skip_lhs_cast
JUMPIFNEQ ?gt_op?skip_rhs_cast GF@_trhs string@int
INT2FLOAT GF@_rhs GF@_rhs
LABEL ?gt_op?skip_rhs_cast
LABEL ?gt_op?execute
GT GF@_lhs GF@_lhs GF@_rhs
LABEL ?gt_op?end
PUSHS GF@_lhs
RETURN



LABEL &lte_op
POPS GF@_lhs
TYPE GF@_tlhs GF@_lhs
JUMPIFNEQ ?type_ok_19 GF@_tlhs string@bool
EXIT int@7
LABEL ?type_ok_19
POPS GF@_rhs
TYPE GF@_trhs GF@_rhs
JUMPIFNEQ ?type_ok_20 GF@_trhs string@bool
EXIT int@7
LABEL ?type_ok_20
JUMPIFNEQ ?lte_op?skip_lhs_nil_conversion GF@_tlhs string@nil
JUMPIFEQ ?lte_op?skip_lhs_to_int_conversion GF@_trhs string@string
JUMPIFEQ ?lte_op?skip_lhs_to_int_conversion GF@_trhs string@float
MOVE GF@_lhs int@0
TYPE GF@_tlhs GF@_lhs
JUMP ?lte_op?skip_lhs_nil_conversion
LABEL ?lte_op?skip_lhs_to_int_conversion
JUMPIFNEQ ?lte_op?skip_lhs_to_string_conversion GF@_trhs string@string
MOVE GF@_lhs string@
TYPE GF@_tlhs GF@_lhs
JUMP ?lte_op?skip_lhs_nil_conversion
LABEL ?lte_op?skip_lhs_to_string_conversion
MOVE GF@_lhs int@0
INT2FLOAT GF@_lhs GF@_lhs
TYPE GF@_tlhs GF@_lhs
LABEL ?lte_op?skip_lhs_nil_conversion
JUMPIFNEQ ?lte_op?skip_rhs_nil_conversion GF@_trhs string@nil
JUMPIFEQ ?lte_op?skip_rhs_to_int_conversion GF@_tlhs string@string
JUMPIFEQ ?lte_op?skip_rhs_to_int_conversion GF@_tlhs string@float
MOVE GF@_rhs int@0
TYPE GF@_trhs GF@_rhs
JUMP ?lte_op?skip_rhs_nil_conversion
LABEL ?lte_op?skip_rhs_to_int_conversion
JUMPIFNEQ ?lte_op?skip_rhs_to_string_conversion GF@_tlhs string@string
MOVE GF@_rhs string@
TYPE GF@_trhs GF@_rhs
JUMP ?lte_op?skip_rhs_nil_conversion
LABEL ?lte_op?skip_rhs_to_string_conversion
MOVE GF@_rhs int@0
INT2FLOAT GF@_rhs GF@_rhs
TYPE GF@_trhs GF@_rhs
LABEL ?lte_op?skip_rhs_nil_conversion
JUMPIFEQ ?lte_op?execute GF@_tlhs GF@_trhs
JUMPIFNEQ ?lte_op?lhs_not_string GF@_tlhs string@string
MOVE GF@_lhs bool@false
JUMP ?lte_op?end
LABEL ?lte_op?lhs_not_string
JUMPIFNEQ ?lte_op?rhs_not_string GF@_trhs string@string
MOVE GF@_lhs bool@false
JUMP ?lte_op?end
LABEL ?lte_op?rhs_not_string
JUMPIFNEQ ?lte_op?skip_lhs_cast GF@_tlhs string@int
INT2FLOAT GF@_lhs GF@_lhs
LABEL ?lte_op?skip_lhs_cast
JUMPIFNEQ ?lte_op?skip_rhs_cast GF@_trhs string@int
INT2FLOAT GF@_rhs GF@_rhs
LABEL ?lte_op?skip_rhs_cast
LABEL ?lte_op?execute
LT GF@_aux1 GF@_lhs GF@_rhs
EQ GF@_lhs GF@_lhs GF@_rhs
OR GF@_lhs GF@_lhs GF@_aux1
LABEL ?lte_op?end
PUSHS GF@_lhs
RETURN



LABEL &gte_op
POPS GF@_lhs
TYPE GF@_tlhs GF@_lhs
JUMPIFNEQ ?type_ok_21 GF@_tlhs string@bool
EXIT int@7
LABEL ?type_ok_21
POPS GF@_rhs
TYPE GF@_trhs GF@_rhs
JUMPIFNEQ ?type_ok_22 GF@_trhs string@bool
EXIT int@7
LABEL ?type_ok_22
JUMPIFNEQ ?gte_op?skip_lhs_nil_conversion GF@_tlhs string@nil
JUMPIFEQ ?gte_op?skip_lhs_to_int_conversion GF@_trhs string@string
JUMPIFEQ ?gte_op?skip_lhs_to_int_conversion GF@_trhs string@float
MOVE GF@_lhs int@0
TYPE GF@_tlhs GF@_lhs
JUMP ?gte_op?skip_lhs_nil_conversion
LABEL ?gte_op?skip_lhs_to_int_conversion
JUMPIFNEQ ?gte_op?skip_lhs_to_string_conversion GF@_trhs string@string
MOVE GF@_lhs string@
TYPE GF@_tlhs GF@_lhs
JUMP ?gte_op?skip_lhs_nil_conversion
LABEL ?gte_op?skip_lhs_to_string_conversion
MOVE GF@_lhs int@0
INT2FLOAT GF@_lhs GF@_lhs
TYPE GF@_tlhs GF@_lhs
LABEL ?gte_op?skip_lhs_nil_conversion
JUMPIFNEQ ?gte_op?skip_rhs_nil_conversion GF@_trhs string@nil
JUMPIFEQ ?gte_op?skip_rhs_to_int_conversion GF@_tlhs string@string
JUMPIFEQ ?gte_op?skip_rhs_to_int_conversion GF@_tlhs string@float
MOVE GF@_rhs int@0
TYPE GF@_trhs GF@_rhs
JUMP ?gte_op?skip_rhs_nil_conversion
LABEL ?gte_op?skip_rhs_to_int_conversion
JUMPIFNEQ ?gte_op?skip_rhs_to_string_conversion GF@_tlhs string@string
MOVE GF@_rhs string@
TYPE GF@_trhs GF@_rhs
JUMP ?gte_op?skip_rhs_nil_conversion
LABEL ?gte_op?skip_rhs_to_string_conversion
MOVE GF@_rhs int@0
INT2FLOAT GF@_rhs GF@_rhs
TYPE GF@_trhs GF@_rhs
LABEL ?gte_op?skip_rhs_nil_conversion
JUMPIFEQ ?gte_op?execute GF@_tlhs GF@_trhs
JUMPIFNEQ ?gte_op?lhs_not_string GF@_tlhs string@string
MOVE GF@_lhs bool@false
JUMP ?gte_op?end
LABEL ?gte_op?lhs_not_string
JUMPIFNEQ ?gte_op?rhs_not_string GF@_trhs string@string
MOVE GF@_lhs bool@false
JUMP ?gte_op?end
LABEL ?gte_op?rhs_not_string
JUMPIFNEQ ?gte_op?skip_lhs_cast GF@_tlhs string@int
INT2FLOAT GF@_lhs GF@_lhs
LABEL ?gte_op?skip_lhs_cast
JUMPIFNEQ ?gte_op?skip_rhs_cast GF@_trhs string@int
INT2FLOAT GF@_rhs GF@_rhs
LABEL ?gte_op?skip_rhs_cast
LABEL ?gte_op?execute
GT GF@_aux1 GF@_lhs GF@_rhs
EQ GF@_lhs GF@_lhs GF@_rhs
OR GF@_lhs GF@_lhs GF@_aux1
LABEL ?gte_op?end
PUSHS GF@_lhs
RETURN



# HELPER FUNCTIONS END

