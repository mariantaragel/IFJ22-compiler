.IFJcode22
# TMP VARS START
    DEFVAR GF@_tmp
    DEFVAR GF@_tmp_res
    DEFVAR GF@_tmp_type
    DEFVAR GF@_arg_count
    DEFVAR GF@_rhs
    DEFVAR GF@_lhs
    DEFVAR GF@_tlhs
    DEFVAR GF@_trhs
    DEFVAR GF@_aux1
# TMP VARS END

# FUNC DEF FLAGS START
    DEFVAR GF@?write?defined
    MOVE GF@?write?defined bool@true
    DEFVAR GF@?ord?defined
    MOVE GF@?ord?defined bool@true
    DEFVAR GF@?substring?defined
    MOVE GF@?substring?defined bool@true
    DEFVAR GF@?chr?defined
    MOVE GF@?chr?defined bool@true
    DEFVAR GF@?ssubstr?defined
    MOVE GF@?ssubstr?defined bool@false
    DEFVAR GF@?strlen?defined
    MOVE GF@?strlen?defined bool@true
    DEFVAR GF@?reads?defined
    MOVE GF@?reads?defined bool@true
    DEFVAR GF@?setData?defined
    MOVE GF@?setData?defined bool@false
# FUNC DEF FLAGS END

# DEFINE USED VARS START
    DEFVAR GF@$data
    DEFVAR GF@$ptr
    DEFVAR GF@$program
    DEFVAR GF@$program_length
    DEFVAR GF@$pc
    DEFVAR GF@$pcPlusOne
    DEFVAR GF@$c
    DEFVAR GF@$ptrPlusOne
    DEFVAR GF@$oldByte
    DEFVAR GF@$newByte
    DEFVAR GF@$out
    DEFVAR GF@$nesting
# DEFINE USED VARS END

# EXPR ASS START
    # CHECK EXPR VARS INIT START
    # CHECK EXPR VARS INIT END

    # EXPRESSION START
        PUSHS string@
    # EXPRESSION END

    POPS GF@$data
# EXPR ASS END

# EXPR ASS START
    # CHECK EXPR VARS INIT START
    # CHECK EXPR VARS INIT END

    # EXPRESSION START
        PUSHS int@0
    # EXPRESSION END

    POPS GF@$ptr
# EXPR ASS END

# FUNC ASS START
    # CALL FUNC [reads] START
        JUMPIFEQ ?reads?func_def_ok_1 GF@?reads?defined bool@true
        EXIT int@3
        LABEL ?reads?func_def_ok_1
        # CHECK FUNC ARG INIT START
        # CHECK FUNC ARG INIT END

        PUSHS int@0
        CALL reads
    # CALL FUNC [reads] END

    POPS GF@$program
# FUNC ASS END

# FUNC ASS START
    # CALL FUNC [strlen] START
        JUMPIFEQ ?strlen?func_def_ok_2 GF@?strlen?defined bool@true
        EXIT int@3
        LABEL ?strlen?func_def_ok_2
        # CHECK FUNC ARG INIT START
            # CHECK VAR [$program] INIT START
                TYPE GF@_tmp GF@$program
                JUMPIFNEQ ?$program?var_init_ok_3 GF@_tmp string@
                EXIT int@5
                LABEL ?$program?var_init_ok_3
            # CHECK VAR [$program] INIT END

        # CHECK FUNC ARG INIT END

        PUSHS GF@$program
        PUSHS int@1
        CALL strlen
    # CALL FUNC [strlen] END

    POPS GF@$program_length
# FUNC ASS END

# EXPR ASS START
    # CHECK EXPR VARS INIT START
    # CHECK EXPR VARS INIT END

    # EXPRESSION START
        PUSHS int@0
    # EXPRESSION END

    POPS GF@$pc
# EXPR ASS END

# FUNC [setData] DEF FLAG SET START
    MOVE GF@?setData?defined bool@true
# FUNC [setData] DEF FLAG SET END

# FUNC [ssubstr] DEF FLAG SET START
    MOVE GF@?ssubstr?defined bool@true
# FUNC [ssubstr] DEF FLAG SET END

# WHILE START
    # CHECK EXPR VARS INIT START
        # CHECK VAR [$program_length] INIT START
            TYPE GF@_tmp GF@$program_length
            JUMPIFNEQ ?$program_length?var_init_ok_4 GF@_tmp string@
            EXIT int@5
            LABEL ?$program_length?var_init_ok_4
        # CHECK VAR [$program_length] INIT END

        # CHECK VAR [$pc] INIT START
            TYPE GF@_tmp GF@$pc
            JUMPIFNEQ ?$pc?var_init_ok_5 GF@_tmp string@
            EXIT int@5
            LABEL ?$pc?var_init_ok_5
        # CHECK VAR [$pc] INIT END

    # CHECK EXPR VARS INIT END

    LABEL ?while_start_1
    # EXPRESSION START
        PUSHS GF@$program_length
        PUSHS GF@$pc
        CALL &lt_op
    # EXPRESSION END

    CALL &to_bool
    POPS GF@_tmp_res
    JUMPIFEQ ?while_end_1 GF@_tmp_res bool@false
    # EXPR ASS START
        # CHECK EXPR VARS INIT START
            # CHECK VAR [$pc] INIT START
                TYPE GF@_tmp GF@$pc
                JUMPIFNEQ ?$pc?var_init_ok_6 GF@_tmp string@
                EXIT int@5
                LABEL ?$pc?var_init_ok_6
            # CHECK VAR [$pc] INIT END

        # CHECK EXPR VARS INIT END

        # EXPRESSION START
            PUSHS int@1
            PUSHS GF@$pc
            CALL &add_op
        # EXPRESSION END

        POPS GF@$pcPlusOne
    # EXPR ASS END

    # FUNC ASS START
        # CALL FUNC [ssubstr] START
            JUMPIFEQ ?ssubstr?func_def_ok_7 GF@?ssubstr?defined bool@true
            EXIT int@3
            LABEL ?ssubstr?func_def_ok_7
            # CHECK FUNC ARG INIT START
                # CHECK VAR [$program] INIT START
                    TYPE GF@_tmp GF@$program
                    JUMPIFNEQ ?$program?var_init_ok_8 GF@_tmp string@
                    EXIT int@5
                    LABEL ?$program?var_init_ok_8
                # CHECK VAR [$program] INIT END

                # CHECK VAR [$pc] INIT START
                    TYPE GF@_tmp GF@$pc
                    JUMPIFNEQ ?$pc?var_init_ok_9 GF@_tmp string@
                    EXIT int@5
                    LABEL ?$pc?var_init_ok_9
                # CHECK VAR [$pc] INIT END

                # CHECK VAR [$pcPlusOne] INIT START
                    TYPE GF@_tmp GF@$pcPlusOne
                    JUMPIFNEQ ?$pcPlusOne?var_init_ok_10 GF@_tmp string@
                    EXIT int@5
                    LABEL ?$pcPlusOne?var_init_ok_10
                # CHECK VAR [$pcPlusOne] INIT END

            # CHECK FUNC ARG INIT END

            PUSHS GF@$pcPlusOne
            PUSHS GF@$pc
            PUSHS GF@$program
            PUSHS int@3
            CALL ssubstr
        # CALL FUNC [ssubstr] END

        POPS GF@$c
    # FUNC ASS END

    # IF START
        # CHECK EXPR VARS INIT START
            # CHECK VAR [$c] INIT START
                TYPE GF@_tmp GF@$c
                JUMPIFNEQ ?$c?var_init_ok_11 GF@_tmp string@
                EXIT int@5
                LABEL ?$c?var_init_ok_11
            # CHECK VAR [$c] INIT END

        # CHECK EXPR VARS INIT END

        # EXPRESSION START
            PUSHS GF@$c
        # EXPRESSION END

        CALL &to_bool
        POPS GF@_tmp_res
        JUMPIFEQ ?if_branch_false_1 GF@_tmp_res bool@false
        JUMP ?if_end_1
        LABEL ?if_branch_false_1
        # FUNC ASS START
            # CALL FUNC [chr] START
                JUMPIFEQ ?chr?func_def_ok_12 GF@?chr?defined bool@true
                EXIT int@3
                LABEL ?chr?func_def_ok_12
                # CHECK FUNC ARG INIT START
                # CHECK FUNC ARG INIT END

                PUSHS int@0
                PUSHS int@1
                CALL chr
            # CALL FUNC [chr] END

            POPS GF@$c
        # FUNC ASS END

        LABEL ?if_end_1
    # IF END

    # IF START
        # CHECK EXPR VARS INIT START
            # CHECK VAR [$c] INIT START
                TYPE GF@_tmp GF@$c
                JUMPIFNEQ ?$c?var_init_ok_13 GF@_tmp string@
                EXIT int@5
                LABEL ?$c?var_init_ok_13
            # CHECK VAR [$c] INIT END

        # CHECK EXPR VARS INIT END

        # EXPRESSION START
            PUSHS string@+
            PUSHS GF@$c
            CALL &eq_op
        # EXPRESSION END

        CALL &to_bool
        POPS GF@_tmp_res
        JUMPIFEQ ?if_branch_false_2 GF@_tmp_res bool@false
        # EXPR ASS START
            # CHECK EXPR VARS INIT START
                # CHECK VAR [$ptr] INIT START
                    TYPE GF@_tmp GF@$ptr
                    JUMPIFNEQ ?$ptr?var_init_ok_14 GF@_tmp string@
                    EXIT int@5
                    LABEL ?$ptr?var_init_ok_14
                # CHECK VAR [$ptr] INIT END

            # CHECK EXPR VARS INIT END

            # EXPRESSION START
                PUSHS int@1
                PUSHS GF@$ptr
                CALL &add_op
            # EXPRESSION END

            POPS GF@$ptrPlusOne
        # EXPR ASS END

        # FUNC ASS START
            # CALL FUNC [ssubstr] START
                JUMPIFEQ ?ssubstr?func_def_ok_15 GF@?ssubstr?defined bool@true
                EXIT int@3
                LABEL ?ssubstr?func_def_ok_15
                # CHECK FUNC ARG INIT START
                    # CHECK VAR [$data] INIT START
                        TYPE GF@_tmp GF@$data
                        JUMPIFNEQ ?$data?var_init_ok_16 GF@_tmp string@
                        EXIT int@5
                        LABEL ?$data?var_init_ok_16
                    # CHECK VAR [$data] INIT END

                    # CHECK VAR [$ptr] INIT START
                        TYPE GF@_tmp GF@$ptr
                        JUMPIFNEQ ?$ptr?var_init_ok_17 GF@_tmp string@
                        EXIT int@5
                        LABEL ?$ptr?var_init_ok_17
                    # CHECK VAR [$ptr] INIT END

                    # CHECK VAR [$ptrPlusOne] INIT START
                        TYPE GF@_tmp GF@$ptrPlusOne
                        JUMPIFNEQ ?$ptrPlusOne?var_init_ok_18 GF@_tmp string@
                        EXIT int@5
                        LABEL ?$ptrPlusOne?var_init_ok_18
                    # CHECK VAR [$ptrPlusOne] INIT END

                # CHECK FUNC ARG INIT END

                PUSHS GF@$ptrPlusOne
                PUSHS GF@$ptr
                PUSHS GF@$data
                PUSHS int@3
                CALL ssubstr
            # CALL FUNC [ssubstr] END

            POPS GF@$oldByte
        # FUNC ASS END

        # FUNC ASS START
            # CALL FUNC [ord] START
                JUMPIFEQ ?ord?func_def_ok_19 GF@?ord?defined bool@true
                EXIT int@3
                LABEL ?ord?func_def_ok_19
                # CHECK FUNC ARG INIT START
                    # CHECK VAR [$oldByte] INIT START
                        TYPE GF@_tmp GF@$oldByte
                        JUMPIFNEQ ?$oldByte?var_init_ok_20 GF@_tmp string@
                        EXIT int@5
                        LABEL ?$oldByte?var_init_ok_20
                    # CHECK VAR [$oldByte] INIT END

                # CHECK FUNC ARG INIT END

                PUSHS GF@$oldByte
                PUSHS int@1
                CALL ord
            # CALL FUNC [ord] END

            POPS GF@$newByte
        # FUNC ASS END

        # EXPR ASS START
            # CHECK EXPR VARS INIT START
                # CHECK VAR [$newByte] INIT START
                    TYPE GF@_tmp GF@$newByte
                    JUMPIFNEQ ?$newByte?var_init_ok_21 GF@_tmp string@
                    EXIT int@5
                    LABEL ?$newByte?var_init_ok_21
                # CHECK VAR [$newByte] INIT END

            # CHECK EXPR VARS INIT END

            # EXPRESSION START
                PUSHS int@1
                PUSHS GF@$newByte
                CALL &add_op
            # EXPRESSION END

            POPS GF@$newByte
        # EXPR ASS END

        # IF START
            # CHECK EXPR VARS INIT START
                # CHECK VAR [$newByte] INIT START
                    TYPE GF@_tmp GF@$newByte
                    JUMPIFNEQ ?$newByte?var_init_ok_22 GF@_tmp string@
                    EXIT int@5
                    LABEL ?$newByte?var_init_ok_22
                # CHECK VAR [$newByte] INIT END

            # CHECK EXPR VARS INIT END

            # EXPRESSION START
                PUSHS int@255
                PUSHS GF@$newByte
                CALL &gt_op
            # EXPRESSION END

            CALL &to_bool
            POPS GF@_tmp_res
            JUMPIFEQ ?if_branch_false_3 GF@_tmp_res bool@false
            # EXPR ASS START
                # CHECK EXPR VARS INIT START
                # CHECK EXPR VARS INIT END

                # EXPRESSION START
                    PUSHS int@0
                # EXPRESSION END

                POPS GF@$newByte
            # EXPR ASS END

            JUMP ?if_end_3
            LABEL ?if_branch_false_3
            LABEL ?if_end_3
        # IF END

        # IF START
            # CHECK EXPR VARS INIT START
                # CHECK VAR [$newByte] INIT START
                    TYPE GF@_tmp GF@$newByte
                    JUMPIFNEQ ?$newByte?var_init_ok_23 GF@_tmp string@
                    EXIT int@5
                    LABEL ?$newByte?var_init_ok_23
                # CHECK VAR [$newByte] INIT END

            # CHECK EXPR VARS INIT END

            # EXPRESSION START
                PUSHS int@0
                PUSHS GF@$newByte
                CALL &lt_op
            # EXPRESSION END

            CALL &to_bool
            POPS GF@_tmp_res
            JUMPIFEQ ?if_branch_false_4 GF@_tmp_res bool@false
            # EXPR ASS START
                # CHECK EXPR VARS INIT START
                # CHECK EXPR VARS INIT END

                # EXPRESSION START
                    PUSHS int@255
                # EXPRESSION END

                POPS GF@$newByte
            # EXPR ASS END

            JUMP ?if_end_4
            LABEL ?if_branch_false_4
            LABEL ?if_end_4
        # IF END

        # FUNC ASS START
            # CALL FUNC [setData] START
                JUMPIFEQ ?setData?func_def_ok_24 GF@?setData?defined bool@true
                EXIT int@3
                LABEL ?setData?func_def_ok_24
                # CHECK FUNC ARG INIT START
                    # CHECK VAR [$data] INIT START
                        TYPE GF@_tmp GF@$data
                        JUMPIFNEQ ?$data?var_init_ok_25 GF@_tmp string@
                        EXIT int@5
                        LABEL ?$data?var_init_ok_25
                    # CHECK VAR [$data] INIT END

                    # CHECK VAR [$ptr] INIT START
                        TYPE GF@_tmp GF@$ptr
                        JUMPIFNEQ ?$ptr?var_init_ok_26 GF@_tmp string@
                        EXIT int@5
                        LABEL ?$ptr?var_init_ok_26
                    # CHECK VAR [$ptr] INIT END

                    # CHECK VAR [$newByte] INIT START
                        TYPE GF@_tmp GF@$newByte
                        JUMPIFNEQ ?$newByte?var_init_ok_27 GF@_tmp string@
                        EXIT int@5
                        LABEL ?$newByte?var_init_ok_27
                    # CHECK VAR [$newByte] INIT END

                # CHECK FUNC ARG INIT END

                PUSHS GF@$newByte
                PUSHS GF@$ptr
                PUSHS GF@$data
                PUSHS int@3
                CALL setData
            # CALL FUNC [setData] END

            POPS GF@$data
        # FUNC ASS END

        JUMP ?if_end_2
        LABEL ?if_branch_false_2
        # IF START
            # CHECK EXPR VARS INIT START
                # CHECK VAR [$c] INIT START
                    TYPE GF@_tmp GF@$c
                    JUMPIFNEQ ?$c?var_init_ok_28 GF@_tmp string@
                    EXIT int@5
                    LABEL ?$c?var_init_ok_28
                # CHECK VAR [$c] INIT END

            # CHECK EXPR VARS INIT END

            # EXPRESSION START
                PUSHS string@-
                PUSHS GF@$c
                CALL &eq_op
            # EXPRESSION END

            CALL &to_bool
            POPS GF@_tmp_res
            JUMPIFEQ ?if_branch_false_5 GF@_tmp_res bool@false
            # EXPR ASS START
                # CHECK EXPR VARS INIT START
                    # CHECK VAR [$ptr] INIT START
                        TYPE GF@_tmp GF@$ptr
                        JUMPIFNEQ ?$ptr?var_init_ok_29 GF@_tmp string@
                        EXIT int@5
                        LABEL ?$ptr?var_init_ok_29
                    # CHECK VAR [$ptr] INIT END

                # CHECK EXPR VARS INIT END

                # EXPRESSION START
                    PUSHS int@1
                    PUSHS GF@$ptr
                    CALL &add_op
                # EXPRESSION END

                POPS GF@$ptrPlusOne
            # EXPR ASS END

            # FUNC ASS START
                # CALL FUNC [ssubstr] START
                    JUMPIFEQ ?ssubstr?func_def_ok_30 GF@?ssubstr?defined bool@true
                    EXIT int@3
                    LABEL ?ssubstr?func_def_ok_30
                    # CHECK FUNC ARG INIT START
                        # CHECK VAR [$data] INIT START
                            TYPE GF@_tmp GF@$data
                            JUMPIFNEQ ?$data?var_init_ok_31 GF@_tmp string@
                            EXIT int@5
                            LABEL ?$data?var_init_ok_31
                        # CHECK VAR [$data] INIT END

                        # CHECK VAR [$ptr] INIT START
                            TYPE GF@_tmp GF@$ptr
                            JUMPIFNEQ ?$ptr?var_init_ok_32 GF@_tmp string@
                            EXIT int@5
                            LABEL ?$ptr?var_init_ok_32
                        # CHECK VAR [$ptr] INIT END

                        # CHECK VAR [$ptrPlusOne] INIT START
                            TYPE GF@_tmp GF@$ptrPlusOne
                            JUMPIFNEQ ?$ptrPlusOne?var_init_ok_33 GF@_tmp string@
                            EXIT int@5
                            LABEL ?$ptrPlusOne?var_init_ok_33
                        # CHECK VAR [$ptrPlusOne] INIT END

                    # CHECK FUNC ARG INIT END

                    PUSHS GF@$ptrPlusOne
                    PUSHS GF@$ptr
                    PUSHS GF@$data
                    PUSHS int@3
                    CALL ssubstr
                # CALL FUNC [ssubstr] END

                POPS GF@$oldByte
            # FUNC ASS END

            # FUNC ASS START
                # CALL FUNC [ord] START
                    JUMPIFEQ ?ord?func_def_ok_34 GF@?ord?defined bool@true
                    EXIT int@3
                    LABEL ?ord?func_def_ok_34
                    # CHECK FUNC ARG INIT START
                        # CHECK VAR [$oldByte] INIT START
                            TYPE GF@_tmp GF@$oldByte
                            JUMPIFNEQ ?$oldByte?var_init_ok_35 GF@_tmp string@
                            EXIT int@5
                            LABEL ?$oldByte?var_init_ok_35
                        # CHECK VAR [$oldByte] INIT END

                    # CHECK FUNC ARG INIT END

                    PUSHS GF@$oldByte
                    PUSHS int@1
                    CALL ord
                # CALL FUNC [ord] END

                POPS GF@$newByte
            # FUNC ASS END

            # EXPR ASS START
                # CHECK EXPR VARS INIT START
                    # CHECK VAR [$newByte] INIT START
                        TYPE GF@_tmp GF@$newByte
                        JUMPIFNEQ ?$newByte?var_init_ok_36 GF@_tmp string@
                        EXIT int@5
                        LABEL ?$newByte?var_init_ok_36
                    # CHECK VAR [$newByte] INIT END

                # CHECK EXPR VARS INIT END

                # EXPRESSION START
                    PUSHS int@1
                    PUSHS GF@$newByte
                    CALL &sub_op
                # EXPRESSION END

                POPS GF@$newByte
            # EXPR ASS END

            # IF START
                # CHECK EXPR VARS INIT START
                    # CHECK VAR [$newByte] INIT START
                        TYPE GF@_tmp GF@$newByte
                        JUMPIFNEQ ?$newByte?var_init_ok_37 GF@_tmp string@
                        EXIT int@5
                        LABEL ?$newByte?var_init_ok_37
                    # CHECK VAR [$newByte] INIT END

                # CHECK EXPR VARS INIT END

                # EXPRESSION START
                    PUSHS int@255
                    PUSHS GF@$newByte
                    CALL &gt_op
                # EXPRESSION END

                CALL &to_bool
                POPS GF@_tmp_res
                JUMPIFEQ ?if_branch_false_6 GF@_tmp_res bool@false
                # EXPR ASS START
                    # CHECK EXPR VARS INIT START
                    # CHECK EXPR VARS INIT END

                    # EXPRESSION START
                        PUSHS int@0
                    # EXPRESSION END

                    POPS GF@$newByte
                # EXPR ASS END

                JUMP ?if_end_6
                LABEL ?if_branch_false_6
                LABEL ?if_end_6
            # IF END

            # IF START
                # CHECK EXPR VARS INIT START
                    # CHECK VAR [$newByte] INIT START
                        TYPE GF@_tmp GF@$newByte
                        JUMPIFNEQ ?$newByte?var_init_ok_38 GF@_tmp string@
                        EXIT int@5
                        LABEL ?$newByte?var_init_ok_38
                    # CHECK VAR [$newByte] INIT END

                # CHECK EXPR VARS INIT END

                # EXPRESSION START
                    PUSHS int@0
                    PUSHS GF@$newByte
                    CALL &lt_op
                # EXPRESSION END

                CALL &to_bool
                POPS GF@_tmp_res
                JUMPIFEQ ?if_branch_false_7 GF@_tmp_res bool@false
                # EXPR ASS START
                    # CHECK EXPR VARS INIT START
                    # CHECK EXPR VARS INIT END

                    # EXPRESSION START
                        PUSHS int@255
                    # EXPRESSION END

                    POPS GF@$newByte
                # EXPR ASS END

                JUMP ?if_end_7
                LABEL ?if_branch_false_7
                LABEL ?if_end_7
            # IF END

            # FUNC ASS START
                # CALL FUNC [setData] START
                    JUMPIFEQ ?setData?func_def_ok_39 GF@?setData?defined bool@true
                    EXIT int@3
                    LABEL ?setData?func_def_ok_39
                    # CHECK FUNC ARG INIT START
                        # CHECK VAR [$data] INIT START
                            TYPE GF@_tmp GF@$data
                            JUMPIFNEQ ?$data?var_init_ok_40 GF@_tmp string@
                            EXIT int@5
                            LABEL ?$data?var_init_ok_40
                        # CHECK VAR [$data] INIT END

                        # CHECK VAR [$ptr] INIT START
                            TYPE GF@_tmp GF@$ptr
                            JUMPIFNEQ ?$ptr?var_init_ok_41 GF@_tmp string@
                            EXIT int@5
                            LABEL ?$ptr?var_init_ok_41
                        # CHECK VAR [$ptr] INIT END

                        # CHECK VAR [$newByte] INIT START
                            TYPE GF@_tmp GF@$newByte
                            JUMPIFNEQ ?$newByte?var_init_ok_42 GF@_tmp string@
                            EXIT int@5
                            LABEL ?$newByte?var_init_ok_42
                        # CHECK VAR [$newByte] INIT END

                    # CHECK FUNC ARG INIT END

                    PUSHS GF@$newByte
                    PUSHS GF@$ptr
                    PUSHS GF@$data
                    PUSHS int@3
                    CALL setData
                # CALL FUNC [setData] END

                POPS GF@$data
            # FUNC ASS END

            JUMP ?if_end_5
            LABEL ?if_branch_false_5
            # IF START
                # CHECK EXPR VARS INIT START
                    # CHECK VAR [$c] INIT START
                        TYPE GF@_tmp GF@$c
                        JUMPIFNEQ ?$c?var_init_ok_43 GF@_tmp string@
                        EXIT int@5
                        LABEL ?$c?var_init_ok_43
                    # CHECK VAR [$c] INIT END

                # CHECK EXPR VARS INIT END

                # EXPRESSION START
                    PUSHS string@>
                    PUSHS GF@$c
                    CALL &eq_op
                # EXPRESSION END

                CALL &to_bool
                POPS GF@_tmp_res
                JUMPIFEQ ?if_branch_false_8 GF@_tmp_res bool@false
                # EXPR ASS START
                    # CHECK EXPR VARS INIT START
                        # CHECK VAR [$ptr] INIT START
                            TYPE GF@_tmp GF@$ptr
                            JUMPIFNEQ ?$ptr?var_init_ok_44 GF@_tmp string@
                            EXIT int@5
                            LABEL ?$ptr?var_init_ok_44
                        # CHECK VAR [$ptr] INIT END

                    # CHECK EXPR VARS INIT END

                    # EXPRESSION START
                        PUSHS int@1
                        PUSHS GF@$ptr
                        CALL &add_op
                    # EXPRESSION END

                    POPS GF@$ptr
                # EXPR ASS END

                JUMP ?if_end_8
                LABEL ?if_branch_false_8
                # IF START
                    # CHECK EXPR VARS INIT START
                        # CHECK VAR [$c] INIT START
                            TYPE GF@_tmp GF@$c
                            JUMPIFNEQ ?$c?var_init_ok_45 GF@_tmp string@
                            EXIT int@5
                            LABEL ?$c?var_init_ok_45
                        # CHECK VAR [$c] INIT END

                    # CHECK EXPR VARS INIT END

                    # EXPRESSION START
                        PUSHS string@<
                        PUSHS GF@$c
                        CALL &eq_op
                    # EXPRESSION END

                    CALL &to_bool
                    POPS GF@_tmp_res
                    JUMPIFEQ ?if_branch_false_9 GF@_tmp_res bool@false
                    # EXPR ASS START
                        # CHECK EXPR VARS INIT START
                            # CHECK VAR [$ptr] INIT START
                                TYPE GF@_tmp GF@$ptr
                                JUMPIFNEQ ?$ptr?var_init_ok_46 GF@_tmp string@
                                EXIT int@5
                                LABEL ?$ptr?var_init_ok_46
                            # CHECK VAR [$ptr] INIT END

                        # CHECK EXPR VARS INIT END

                        # EXPRESSION START
                            PUSHS int@1
                            PUSHS GF@$ptr
                            CALL &sub_op
                        # EXPRESSION END

                        POPS GF@$ptr
                    # EXPR ASS END

                    JUMP ?if_end_9
                    LABEL ?if_branch_false_9
                    # IF START
                        # CHECK EXPR VARS INIT START
                            # CHECK VAR [$c] INIT START
                                TYPE GF@_tmp GF@$c
                                JUMPIFNEQ ?$c?var_init_ok_47 GF@_tmp string@
                                EXIT int@5
                                LABEL ?$c?var_init_ok_47
                            # CHECK VAR [$c] INIT END

                        # CHECK EXPR VARS INIT END

                        # EXPRESSION START
                            PUSHS string@.
                            PUSHS GF@$c
                            CALL &eq_op
                        # EXPRESSION END

                        CALL &to_bool
                        POPS GF@_tmp_res
                        JUMPIFEQ ?if_branch_false_10 GF@_tmp_res bool@false
                        # EXPR ASS START
                            # CHECK EXPR VARS INIT START
                                # CHECK VAR [$ptr] INIT START
                                    TYPE GF@_tmp GF@$ptr
                                    JUMPIFNEQ ?$ptr?var_init_ok_48 GF@_tmp string@
                                    EXIT int@5
                                    LABEL ?$ptr?var_init_ok_48
                                # CHECK VAR [$ptr] INIT END

                            # CHECK EXPR VARS INIT END

                            # EXPRESSION START
                                PUSHS int@1
                                PUSHS GF@$ptr
                                CALL &add_op
                            # EXPRESSION END

                            POPS GF@$ptrPlusOne
                        # EXPR ASS END

                        # FUNC ASS START
                            # CALL FUNC [ssubstr] START
                                JUMPIFEQ ?ssubstr?func_def_ok_49 GF@?ssubstr?defined bool@true
                                EXIT int@3
                                LABEL ?ssubstr?func_def_ok_49
                                # CHECK FUNC ARG INIT START
                                    # CHECK VAR [$data] INIT START
                                        TYPE GF@_tmp GF@$data
                                        JUMPIFNEQ ?$data?var_init_ok_50 GF@_tmp string@
                                        EXIT int@5
                                        LABEL ?$data?var_init_ok_50
                                    # CHECK VAR [$data] INIT END

                                    # CHECK VAR [$ptr] INIT START
                                        TYPE GF@_tmp GF@$ptr
                                        JUMPIFNEQ ?$ptr?var_init_ok_51 GF@_tmp string@
                                        EXIT int@5
                                        LABEL ?$ptr?var_init_ok_51
                                    # CHECK VAR [$ptr] INIT END

                                    # CHECK VAR [$ptrPlusOne] INIT START
                                        TYPE GF@_tmp GF@$ptrPlusOne
                                        JUMPIFNEQ ?$ptrPlusOne?var_init_ok_52 GF@_tmp string@
                                        EXIT int@5
                                        LABEL ?$ptrPlusOne?var_init_ok_52
                                    # CHECK VAR [$ptrPlusOne] INIT END

                                # CHECK FUNC ARG INIT END

                                PUSHS GF@$ptrPlusOne
                                PUSHS GF@$ptr
                                PUSHS GF@$data
                                PUSHS int@3
                                CALL ssubstr
                            # CALL FUNC [ssubstr] END

                            POPS GF@$out
                        # FUNC ASS END

                        # STANDALONE FUNC CALL START
                            # CALL FUNC [write] START
                                JUMPIFEQ ?write?func_def_ok_53 GF@?write?defined bool@true
                                EXIT int@3
                                LABEL ?write?func_def_ok_53
                                # CHECK FUNC ARG INIT START
                                    # CHECK VAR [$out] INIT START
                                        TYPE GF@_tmp GF@$out
                                        JUMPIFNEQ ?$out?var_init_ok_54 GF@_tmp string@
                                        EXIT int@5
                                        LABEL ?$out?var_init_ok_54
                                    # CHECK VAR [$out] INIT END

                                # CHECK FUNC ARG INIT END

                                PUSHS GF@$out
                                PUSHS int@1
                                CALL write
                            # CALL FUNC [write] END

                            POPS GF@_tmp_res
                        # STANDALONE FUNC CALL END

                        JUMP ?if_end_10
                        LABEL ?if_branch_false_10
                        # IF START
                            # CHECK EXPR VARS INIT START
                                # CHECK VAR [$c] INIT START
                                    TYPE GF@_tmp GF@$c
                                    JUMPIFNEQ ?$c?var_init_ok_55 GF@_tmp string@
                                    EXIT int@5
                                    LABEL ?$c?var_init_ok_55
                                # CHECK VAR [$c] INIT END

                            # CHECK EXPR VARS INIT END

                            # EXPRESSION START
                                PUSHS string@[
                                PUSHS GF@$c
                                CALL &eq_op
                            # EXPRESSION END

                            CALL &to_bool
                            POPS GF@_tmp_res
                            JUMPIFEQ ?if_branch_false_11 GF@_tmp_res bool@false
                            # EXPR ASS START
                                # CHECK EXPR VARS INIT START
                                    # CHECK VAR [$ptr] INIT START
                                        TYPE GF@_tmp GF@$ptr
                                        JUMPIFNEQ ?$ptr?var_init_ok_56 GF@_tmp string@
                                        EXIT int@5
                                        LABEL ?$ptr?var_init_ok_56
                                    # CHECK VAR [$ptr] INIT END

                                # CHECK EXPR VARS INIT END

                                # EXPRESSION START
                                    PUSHS int@1
                                    PUSHS GF@$ptr
                                    CALL &add_op
                                # EXPRESSION END

                                POPS GF@$ptrPlusOne
                            # EXPR ASS END

                            # FUNC ASS START
                                # CALL FUNC [ssubstr] START
                                    JUMPIFEQ ?ssubstr?func_def_ok_57 GF@?ssubstr?defined bool@true
                                    EXIT int@3
                                    LABEL ?ssubstr?func_def_ok_57
                                    # CHECK FUNC ARG INIT START
                                        # CHECK VAR [$data] INIT START
                                            TYPE GF@_tmp GF@$data
                                            JUMPIFNEQ ?$data?var_init_ok_58 GF@_tmp string@
                                            EXIT int@5
                                            LABEL ?$data?var_init_ok_58
                                        # CHECK VAR [$data] INIT END

                                        # CHECK VAR [$ptr] INIT START
                                            TYPE GF@_tmp GF@$ptr
                                            JUMPIFNEQ ?$ptr?var_init_ok_59 GF@_tmp string@
                                            EXIT int@5
                                            LABEL ?$ptr?var_init_ok_59
                                        # CHECK VAR [$ptr] INIT END

                                        # CHECK VAR [$ptrPlusOne] INIT START
                                            TYPE GF@_tmp GF@$ptrPlusOne
                                            JUMPIFNEQ ?$ptrPlusOne?var_init_ok_60 GF@_tmp string@
                                            EXIT int@5
                                            LABEL ?$ptrPlusOne?var_init_ok_60
                                        # CHECK VAR [$ptrPlusOne] INIT END

                                    # CHECK FUNC ARG INIT END

                                    PUSHS GF@$ptrPlusOne
                                    PUSHS GF@$ptr
                                    PUSHS GF@$data
                                    PUSHS int@3
                                    CALL ssubstr
                                # CALL FUNC [ssubstr] END

                                POPS GF@$oldByte
                            # FUNC ASS END

                            # FUNC ASS START
                                # CALL FUNC [ord] START
                                    JUMPIFEQ ?ord?func_def_ok_61 GF@?ord?defined bool@true
                                    EXIT int@3
                                    LABEL ?ord?func_def_ok_61
                                    # CHECK FUNC ARG INIT START
                                        # CHECK VAR [$oldByte] INIT START
                                            TYPE GF@_tmp GF@$oldByte
                                            JUMPIFNEQ ?$oldByte?var_init_ok_62 GF@_tmp string@
                                            EXIT int@5
                                            LABEL ?$oldByte?var_init_ok_62
                                        # CHECK VAR [$oldByte] INIT END

                                    # CHECK FUNC ARG INIT END

                                    PUSHS GF@$oldByte
                                    PUSHS int@1
                                    CALL ord
                                # CALL FUNC [ord] END

                                POPS GF@$newByte
                            # FUNC ASS END

                            # IF START
                                # CHECK EXPR VARS INIT START
                                    # CHECK VAR [$newByte] INIT START
                                        TYPE GF@_tmp GF@$newByte
                                        JUMPIFNEQ ?$newByte?var_init_ok_63 GF@_tmp string@
                                        EXIT int@5
                                        LABEL ?$newByte?var_init_ok_63
                                    # CHECK VAR [$newByte] INIT END

                                # CHECK EXPR VARS INIT END

                                # EXPRESSION START
                                    PUSHS int@0
                                    PUSHS GF@$newByte
                                    CALL &eq_op
                                # EXPRESSION END

                                CALL &to_bool
                                POPS GF@_tmp_res
                                JUMPIFEQ ?if_branch_false_12 GF@_tmp_res bool@false
                                # EXPR ASS START
                                    # CHECK EXPR VARS INIT START
                                        # CHECK VAR [$pc] INIT START
                                            TYPE GF@_tmp GF@$pc
                                            JUMPIFNEQ ?$pc?var_init_ok_64 GF@_tmp string@
                                            EXIT int@5
                                            LABEL ?$pc?var_init_ok_64
                                        # CHECK VAR [$pc] INIT END

                                    # CHECK EXPR VARS INIT END

                                    # EXPRESSION START
                                        PUSHS int@1
                                        PUSHS GF@$pc
                                        CALL &add_op
                                    # EXPRESSION END

                                    POPS GF@$pc
                                # EXPR ASS END

                                # EXPR ASS START
                                    # CHECK EXPR VARS INIT START
                                    # CHECK EXPR VARS INIT END

                                    # EXPRESSION START
                                        PUSHS int@1
                                    # EXPRESSION END

                                    POPS GF@$nesting
                                # EXPR ASS END

                                # WHILE START
                                    # CHECK EXPR VARS INIT START
                                        # CHECK VAR [$nesting] INIT START
                                            TYPE GF@_tmp GF@$nesting
                                            JUMPIFNEQ ?$nesting?var_init_ok_65 GF@_tmp string@
                                            EXIT int@5
                                            LABEL ?$nesting?var_init_ok_65
                                        # CHECK VAR [$nesting] INIT END

                                    # CHECK EXPR VARS INIT END

                                    LABEL ?while_start_2
                                    # EXPRESSION START
                                        PUSHS int@0
                                        PUSHS GF@$nesting
                                        CALL &gt_op
                                    # EXPRESSION END

                                    CALL &to_bool
                                    POPS GF@_tmp_res
                                    JUMPIFEQ ?while_end_2 GF@_tmp_res bool@false
                                    # EXPR ASS START
                                        # CHECK EXPR VARS INIT START
                                            # CHECK VAR [$pc] INIT START
                                                TYPE GF@_tmp GF@$pc
                                                JUMPIFNEQ ?$pc?var_init_ok_66 GF@_tmp string@
                                                EXIT int@5
                                                LABEL ?$pc?var_init_ok_66
                                            # CHECK VAR [$pc] INIT END

                                        # CHECK EXPR VARS INIT END

                                        # EXPRESSION START
                                            PUSHS int@1
                                            PUSHS GF@$pc
                                            CALL &add_op
                                        # EXPRESSION END

                                        POPS GF@$pcPlusOne
                                    # EXPR ASS END

                                    # FUNC ASS START
                                        # CALL FUNC [ssubstr] START
                                            JUMPIFEQ ?ssubstr?func_def_ok_67 GF@?ssubstr?defined bool@true
                                            EXIT int@3
                                            LABEL ?ssubstr?func_def_ok_67
                                            # CHECK FUNC ARG INIT START
                                                # CHECK VAR [$program] INIT START
                                                    TYPE GF@_tmp GF@$program
                                                    JUMPIFNEQ ?$program?var_init_ok_68 GF@_tmp string@
                                                    EXIT int@5
                                                    LABEL ?$program?var_init_ok_68
                                                # CHECK VAR [$program] INIT END

                                                # CHECK VAR [$pc] INIT START
                                                    TYPE GF@_tmp GF@$pc
                                                    JUMPIFNEQ ?$pc?var_init_ok_69 GF@_tmp string@
                                                    EXIT int@5
                                                    LABEL ?$pc?var_init_ok_69
                                                # CHECK VAR [$pc] INIT END

                                                # CHECK VAR [$pcPlusOne] INIT START
                                                    TYPE GF@_tmp GF@$pcPlusOne
                                                    JUMPIFNEQ ?$pcPlusOne?var_init_ok_70 GF@_tmp string@
                                                    EXIT int@5
                                                    LABEL ?$pcPlusOne?var_init_ok_70
                                                # CHECK VAR [$pcPlusOne] INIT END

                                            # CHECK FUNC ARG INIT END

                                            PUSHS GF@$pcPlusOne
                                            PUSHS GF@$pc
                                            PUSHS GF@$program
                                            PUSHS int@3
                                            CALL ssubstr
                                        # CALL FUNC [ssubstr] END

                                        POPS GF@$c
                                    # FUNC ASS END

                                    # IF START
                                        # CHECK EXPR VARS INIT START
                                            # CHECK VAR [$c] INIT START
                                                TYPE GF@_tmp GF@$c
                                                JUMPIFNEQ ?$c?var_init_ok_71 GF@_tmp string@
                                                EXIT int@5
                                                LABEL ?$c?var_init_ok_71
                                            # CHECK VAR [$c] INIT END

                                        # CHECK EXPR VARS INIT END

                                        # EXPRESSION START
                                            PUSHS GF@$c
                                        # EXPRESSION END

                                        CALL &to_bool
                                        POPS GF@_tmp_res
                                        JUMPIFEQ ?if_branch_false_13 GF@_tmp_res bool@false
                                        JUMP ?if_end_13
                                        LABEL ?if_branch_false_13
                                        # FUNC ASS START
                                            # CALL FUNC [chr] START
                                                JUMPIFEQ ?chr?func_def_ok_72 GF@?chr?defined bool@true
                                                EXIT int@3
                                                LABEL ?chr?func_def_ok_72
                                                # CHECK FUNC ARG INIT START
                                                # CHECK FUNC ARG INIT END

                                                PUSHS int@0
                                                PUSHS int@1
                                                CALL chr
                                            # CALL FUNC [chr] END

                                            POPS GF@$c
                                        # FUNC ASS END

                                        LABEL ?if_end_13
                                    # IF END

                                    # IF START
                                        # CHECK EXPR VARS INIT START
                                            # CHECK VAR [$c] INIT START
                                                TYPE GF@_tmp GF@$c
                                                JUMPIFNEQ ?$c?var_init_ok_73 GF@_tmp string@
                                                EXIT int@5
                                                LABEL ?$c?var_init_ok_73
                                            # CHECK VAR [$c] INIT END

                                        # CHECK EXPR VARS INIT END

                                        # EXPRESSION START
                                            PUSHS string@[
                                            PUSHS GF@$c
                                            CALL &eq_op
                                        # EXPRESSION END

                                        CALL &to_bool
                                        POPS GF@_tmp_res
                                        JUMPIFEQ ?if_branch_false_14 GF@_tmp_res bool@false
                                        # EXPR ASS START
                                            # CHECK EXPR VARS INIT START
                                                # CHECK VAR [$nesting] INIT START
                                                    TYPE GF@_tmp GF@$nesting
                                                    JUMPIFNEQ ?$nesting?var_init_ok_74 GF@_tmp string@
                                                    EXIT int@5
                                                    LABEL ?$nesting?var_init_ok_74
                                                # CHECK VAR [$nesting] INIT END

                                            # CHECK EXPR VARS INIT END

                                            # EXPRESSION START
                                                PUSHS int@1
                                                PUSHS GF@$nesting
                                                CALL &add_op
                                            # EXPRESSION END

                                            POPS GF@$nesting
                                        # EXPR ASS END

                                        JUMP ?if_end_14
                                        LABEL ?if_branch_false_14
                                        # IF START
                                            # CHECK EXPR VARS INIT START
                                                # CHECK VAR [$c] INIT START
                                                    TYPE GF@_tmp GF@$c
                                                    JUMPIFNEQ ?$c?var_init_ok_75 GF@_tmp string@
                                                    EXIT int@5
                                                    LABEL ?$c?var_init_ok_75
                                                # CHECK VAR [$c] INIT END

                                            # CHECK EXPR VARS INIT END

                                            # EXPRESSION START
                                                PUSHS string@]
                                                PUSHS GF@$c
                                                CALL &eq_op
                                            # EXPRESSION END

                                            CALL &to_bool
                                            POPS GF@_tmp_res
                                            JUMPIFEQ ?if_branch_false_15 GF@_tmp_res bool@false
                                            # EXPR ASS START
                                                # CHECK EXPR VARS INIT START
                                                    # CHECK VAR [$nesting] INIT START
                                                        TYPE GF@_tmp GF@$nesting
                                                        JUMPIFNEQ ?$nesting?var_init_ok_76 GF@_tmp string@
                                                        EXIT int@5
                                                        LABEL ?$nesting?var_init_ok_76
                                                    # CHECK VAR [$nesting] INIT END

                                                # CHECK EXPR VARS INIT END

                                                # EXPRESSION START
                                                    PUSHS int@1
                                                    PUSHS GF@$nesting
                                                    CALL &sub_op
                                                # EXPRESSION END

                                                POPS GF@$nesting
                                            # EXPR ASS END

                                            JUMP ?if_end_15
                                            LABEL ?if_branch_false_15
                                            LABEL ?if_end_15
                                        # IF END

                                        LABEL ?if_end_14
                                    # IF END

                                    # EXPR ASS START
                                        # CHECK EXPR VARS INIT START
                                            # CHECK VAR [$pc] INIT START
                                                TYPE GF@_tmp GF@$pc
                                                JUMPIFNEQ ?$pc?var_init_ok_77 GF@_tmp string@
                                                EXIT int@5
                                                LABEL ?$pc?var_init_ok_77
                                            # CHECK VAR [$pc] INIT END

                                        # CHECK EXPR VARS INIT END

                                        # EXPRESSION START
                                            PUSHS int@1
                                            PUSHS GF@$pc
                                            CALL &add_op
                                        # EXPRESSION END

                                        POPS GF@$pc
                                    # EXPR ASS END

                                    JUMP ?while_start_2
                                    LABEL ?while_end_2
                                # WHILE END

                                JUMP ?if_end_12
                                LABEL ?if_branch_false_12
                                LABEL ?if_end_12
                            # IF END

                            JUMP ?if_end_11
                            LABEL ?if_branch_false_11
                            # IF START
                                # CHECK EXPR VARS INIT START
                                    # CHECK VAR [$c] INIT START
                                        TYPE GF@_tmp GF@$c
                                        JUMPIFNEQ ?$c?var_init_ok_78 GF@_tmp string@
                                        EXIT int@5
                                        LABEL ?$c?var_init_ok_78
                                    # CHECK VAR [$c] INIT END

                                # CHECK EXPR VARS INIT END

                                # EXPRESSION START
                                    PUSHS string@]
                                    PUSHS GF@$c
                                    CALL &eq_op
                                # EXPRESSION END

                                CALL &to_bool
                                POPS GF@_tmp_res
                                JUMPIFEQ ?if_branch_false_16 GF@_tmp_res bool@false
                                # EXPR ASS START
                                    # CHECK EXPR VARS INIT START
                                        # CHECK VAR [$ptr] INIT START
                                            TYPE GF@_tmp GF@$ptr
                                            JUMPIFNEQ ?$ptr?var_init_ok_79 GF@_tmp string@
                                            EXIT int@5
                                            LABEL ?$ptr?var_init_ok_79
                                        # CHECK VAR [$ptr] INIT END

                                    # CHECK EXPR VARS INIT END

                                    # EXPRESSION START
                                        PUSHS int@1
                                        PUSHS GF@$ptr
                                        CALL &add_op
                                    # EXPRESSION END

                                    POPS GF@$ptrPlusOne
                                # EXPR ASS END

                                # FUNC ASS START
                                    # CALL FUNC [ssubstr] START
                                        JUMPIFEQ ?ssubstr?func_def_ok_80 GF@?ssubstr?defined bool@true
                                        EXIT int@3
                                        LABEL ?ssubstr?func_def_ok_80
                                        # CHECK FUNC ARG INIT START
                                            # CHECK VAR [$data] INIT START
                                                TYPE GF@_tmp GF@$data
                                                JUMPIFNEQ ?$data?var_init_ok_81 GF@_tmp string@
                                                EXIT int@5
                                                LABEL ?$data?var_init_ok_81
                                            # CHECK VAR [$data] INIT END

                                            # CHECK VAR [$ptr] INIT START
                                                TYPE GF@_tmp GF@$ptr
                                                JUMPIFNEQ ?$ptr?var_init_ok_82 GF@_tmp string@
                                                EXIT int@5
                                                LABEL ?$ptr?var_init_ok_82
                                            # CHECK VAR [$ptr] INIT END

                                            # CHECK VAR [$ptrPlusOne] INIT START
                                                TYPE GF@_tmp GF@$ptrPlusOne
                                                JUMPIFNEQ ?$ptrPlusOne?var_init_ok_83 GF@_tmp string@
                                                EXIT int@5
                                                LABEL ?$ptrPlusOne?var_init_ok_83
                                            # CHECK VAR [$ptrPlusOne] INIT END

                                        # CHECK FUNC ARG INIT END

                                        PUSHS GF@$ptrPlusOne
                                        PUSHS GF@$ptr
                                        PUSHS GF@$data
                                        PUSHS int@3
                                        CALL ssubstr
                                    # CALL FUNC [ssubstr] END

                                    POPS GF@$oldByte
                                # FUNC ASS END

                                # FUNC ASS START
                                    # CALL FUNC [ord] START
                                        JUMPIFEQ ?ord?func_def_ok_84 GF@?ord?defined bool@true
                                        EXIT int@3
                                        LABEL ?ord?func_def_ok_84
                                        # CHECK FUNC ARG INIT START
                                            # CHECK VAR [$oldByte] INIT START
                                                TYPE GF@_tmp GF@$oldByte
                                                JUMPIFNEQ ?$oldByte?var_init_ok_85 GF@_tmp string@
                                                EXIT int@5
                                                LABEL ?$oldByte?var_init_ok_85
                                            # CHECK VAR [$oldByte] INIT END

                                        # CHECK FUNC ARG INIT END

                                        PUSHS GF@$oldByte
                                        PUSHS int@1
                                        CALL ord
                                    # CALL FUNC [ord] END

                                    POPS GF@$newByte
                                # FUNC ASS END

                                # IF START
                                    # CHECK EXPR VARS INIT START
                                        # CHECK VAR [$newByte] INIT START
                                            TYPE GF@_tmp GF@$newByte
                                            JUMPIFNEQ ?$newByte?var_init_ok_86 GF@_tmp string@
                                            EXIT int@5
                                            LABEL ?$newByte?var_init_ok_86
                                        # CHECK VAR [$newByte] INIT END

                                    # CHECK EXPR VARS INIT END

                                    # EXPRESSION START
                                        PUSHS int@0
                                        PUSHS GF@$newByte
                                        CALL &eq_op
                                    # EXPRESSION END

                                    CALL &to_bool
                                    POPS GF@_tmp_res
                                    JUMPIFEQ ?if_branch_false_17 GF@_tmp_res bool@false
                                    JUMP ?if_end_17
                                    LABEL ?if_branch_false_17
                                    # EXPR ASS START
                                        # CHECK EXPR VARS INIT START
                                            # CHECK VAR [$pc] INIT START
                                                TYPE GF@_tmp GF@$pc
                                                JUMPIFNEQ ?$pc?var_init_ok_87 GF@_tmp string@
                                                EXIT int@5
                                                LABEL ?$pc?var_init_ok_87
                                            # CHECK VAR [$pc] INIT END

                                        # CHECK EXPR VARS INIT END

                                        # EXPRESSION START
                                            PUSHS int@1
                                            PUSHS GF@$pc
                                            CALL &sub_op
                                        # EXPRESSION END

                                        POPS GF@$pc
                                    # EXPR ASS END

                                    # EXPR ASS START
                                        # CHECK EXPR VARS INIT START
                                        # CHECK EXPR VARS INIT END

                                        # EXPRESSION START
                                            PUSHS int@1
                                        # EXPRESSION END

                                        POPS GF@$nesting
                                    # EXPR ASS END

                                    # WHILE START
                                        # CHECK EXPR VARS INIT START
                                            # CHECK VAR [$nesting] INIT START
                                                TYPE GF@_tmp GF@$nesting
                                                JUMPIFNEQ ?$nesting?var_init_ok_88 GF@_tmp string@
                                                EXIT int@5
                                                LABEL ?$nesting?var_init_ok_88
                                            # CHECK VAR [$nesting] INIT END

                                        # CHECK EXPR VARS INIT END

                                        LABEL ?while_start_3
                                        # EXPRESSION START
                                            PUSHS int@0
                                            PUSHS GF@$nesting
                                            CALL &gt_op
                                        # EXPRESSION END

                                        CALL &to_bool
                                        POPS GF@_tmp_res
                                        JUMPIFEQ ?while_end_3 GF@_tmp_res bool@false
                                        # EXPR ASS START
                                            # CHECK EXPR VARS INIT START
                                                # CHECK VAR [$pc] INIT START
                                                    TYPE GF@_tmp GF@$pc
                                                    JUMPIFNEQ ?$pc?var_init_ok_89 GF@_tmp string@
                                                    EXIT int@5
                                                    LABEL ?$pc?var_init_ok_89
                                                # CHECK VAR [$pc] INIT END

                                            # CHECK EXPR VARS INIT END

                                            # EXPRESSION START
                                                PUSHS int@1
                                                PUSHS GF@$pc
                                                CALL &add_op
                                            # EXPRESSION END

                                            POPS GF@$pcPlusOne
                                        # EXPR ASS END

                                        # FUNC ASS START
                                            # CALL FUNC [ssubstr] START
                                                JUMPIFEQ ?ssubstr?func_def_ok_90 GF@?ssubstr?defined bool@true
                                                EXIT int@3
                                                LABEL ?ssubstr?func_def_ok_90
                                                # CHECK FUNC ARG INIT START
                                                    # CHECK VAR [$program] INIT START
                                                        TYPE GF@_tmp GF@$program
                                                        JUMPIFNEQ ?$program?var_init_ok_91 GF@_tmp string@
                                                        EXIT int@5
                                                        LABEL ?$program?var_init_ok_91
                                                    # CHECK VAR [$program] INIT END

                                                    # CHECK VAR [$pc] INIT START
                                                        TYPE GF@_tmp GF@$pc
                                                        JUMPIFNEQ ?$pc?var_init_ok_92 GF@_tmp string@
                                                        EXIT int@5
                                                        LABEL ?$pc?var_init_ok_92
                                                    # CHECK VAR [$pc] INIT END

                                                    # CHECK VAR [$pcPlusOne] INIT START
                                                        TYPE GF@_tmp GF@$pcPlusOne
                                                        JUMPIFNEQ ?$pcPlusOne?var_init_ok_93 GF@_tmp string@
                                                        EXIT int@5
                                                        LABEL ?$pcPlusOne?var_init_ok_93
                                                    # CHECK VAR [$pcPlusOne] INIT END

                                                # CHECK FUNC ARG INIT END

                                                PUSHS GF@$pcPlusOne
                                                PUSHS GF@$pc
                                                PUSHS GF@$program
                                                PUSHS int@3
                                                CALL ssubstr
                                            # CALL FUNC [ssubstr] END

                                            POPS GF@$c
                                        # FUNC ASS END

                                        # IF START
                                            # CHECK EXPR VARS INIT START
                                                # CHECK VAR [$c] INIT START
                                                    TYPE GF@_tmp GF@$c
                                                    JUMPIFNEQ ?$c?var_init_ok_94 GF@_tmp string@
                                                    EXIT int@5
                                                    LABEL ?$c?var_init_ok_94
                                                # CHECK VAR [$c] INIT END

                                            # CHECK EXPR VARS INIT END

                                            # EXPRESSION START
                                                PUSHS GF@$c
                                            # EXPRESSION END

                                            CALL &to_bool
                                            POPS GF@_tmp_res
                                            JUMPIFEQ ?if_branch_false_18 GF@_tmp_res bool@false
                                            JUMP ?if_end_18
                                            LABEL ?if_branch_false_18
                                            # FUNC ASS START
                                                # CALL FUNC [chr] START
                                                    JUMPIFEQ ?chr?func_def_ok_95 GF@?chr?defined bool@true
                                                    EXIT int@3
                                                    LABEL ?chr?func_def_ok_95
                                                    # CHECK FUNC ARG INIT START
                                                    # CHECK FUNC ARG INIT END

                                                    PUSHS int@0
                                                    PUSHS int@1
                                                    CALL chr
                                                # CALL FUNC [chr] END

                                                POPS GF@$c
                                            # FUNC ASS END

                                            LABEL ?if_end_18
                                        # IF END

                                        # IF START
                                            # CHECK EXPR VARS INIT START
                                                # CHECK VAR [$c] INIT START
                                                    TYPE GF@_tmp GF@$c
                                                    JUMPIFNEQ ?$c?var_init_ok_96 GF@_tmp string@
                                                    EXIT int@5
                                                    LABEL ?$c?var_init_ok_96
                                                # CHECK VAR [$c] INIT END

                                            # CHECK EXPR VARS INIT END

                                            # EXPRESSION START
                                                PUSHS string@[
                                                PUSHS GF@$c
                                                CALL &eq_op
                                            # EXPRESSION END

                                            CALL &to_bool
                                            POPS GF@_tmp_res
                                            JUMPIFEQ ?if_branch_false_19 GF@_tmp_res bool@false
                                            # EXPR ASS START
                                                # CHECK EXPR VARS INIT START
                                                    # CHECK VAR [$nesting] INIT START
                                                        TYPE GF@_tmp GF@$nesting
                                                        JUMPIFNEQ ?$nesting?var_init_ok_97 GF@_tmp string@
                                                        EXIT int@5
                                                        LABEL ?$nesting?var_init_ok_97
                                                    # CHECK VAR [$nesting] INIT END

                                                # CHECK EXPR VARS INIT END

                                                # EXPRESSION START
                                                    PUSHS int@1
                                                    PUSHS GF@$nesting
                                                    CALL &sub_op
                                                # EXPRESSION END

                                                POPS GF@$nesting
                                            # EXPR ASS END

                                            JUMP ?if_end_19
                                            LABEL ?if_branch_false_19
                                            # IF START
                                                # CHECK EXPR VARS INIT START
                                                    # CHECK VAR [$c] INIT START
                                                        TYPE GF@_tmp GF@$c
                                                        JUMPIFNEQ ?$c?var_init_ok_98 GF@_tmp string@
                                                        EXIT int@5
                                                        LABEL ?$c?var_init_ok_98
                                                    # CHECK VAR [$c] INIT END

                                                # CHECK EXPR VARS INIT END

                                                # EXPRESSION START
                                                    PUSHS string@]
                                                    PUSHS GF@$c
                                                    CALL &eq_op
                                                # EXPRESSION END

                                                CALL &to_bool
                                                POPS GF@_tmp_res
                                                JUMPIFEQ ?if_branch_false_20 GF@_tmp_res bool@false
                                                # EXPR ASS START
                                                    # CHECK EXPR VARS INIT START
                                                        # CHECK VAR [$nesting] INIT START
                                                            TYPE GF@_tmp GF@$nesting
                                                            JUMPIFNEQ ?$nesting?var_init_ok_99 GF@_tmp string@
                                                            EXIT int@5
                                                            LABEL ?$nesting?var_init_ok_99
                                                        # CHECK VAR [$nesting] INIT END

                                                    # CHECK EXPR VARS INIT END

                                                    # EXPRESSION START
                                                        PUSHS int@1
                                                        PUSHS GF@$nesting
                                                        CALL &add_op
                                                    # EXPRESSION END

                                                    POPS GF@$nesting
                                                # EXPR ASS END

                                                JUMP ?if_end_20
                                                LABEL ?if_branch_false_20
                                                LABEL ?if_end_20
                                            # IF END

                                            LABEL ?if_end_19
                                        # IF END

                                        # EXPR ASS START
                                            # CHECK EXPR VARS INIT START
                                                # CHECK VAR [$pc] INIT START
                                                    TYPE GF@_tmp GF@$pc
                                                    JUMPIFNEQ ?$pc?var_init_ok_100 GF@_tmp string@
                                                    EXIT int@5
                                                    LABEL ?$pc?var_init_ok_100
                                                # CHECK VAR [$pc] INIT END

                                            # CHECK EXPR VARS INIT END

                                            # EXPRESSION START
                                                PUSHS int@1
                                                PUSHS GF@$pc
                                                CALL &sub_op
                                            # EXPRESSION END

                                            POPS GF@$pc
                                        # EXPR ASS END

                                        JUMP ?while_start_3
                                        LABEL ?while_end_3
                                    # WHILE END

                                    LABEL ?if_end_17
                                # IF END

                                JUMP ?if_end_16
                                LABEL ?if_branch_false_16
                                LABEL ?if_end_16
                            # IF END

                            LABEL ?if_end_11
                        # IF END

                        LABEL ?if_end_10
                    # IF END

                    LABEL ?if_end_9
                # IF END

                LABEL ?if_end_8
            # IF END

            LABEL ?if_end_5
        # IF END

        LABEL ?if_end_2
    # IF END

    # EXPR ASS START
        # CHECK EXPR VARS INIT START
            # CHECK VAR [$pc] INIT START
                TYPE GF@_tmp GF@$pc
                JUMPIFNEQ ?$pc?var_init_ok_101 GF@_tmp string@
                EXIT int@5
                LABEL ?$pc?var_init_ok_101
            # CHECK VAR [$pc] INIT END

        # CHECK EXPR VARS INIT END

        # EXPRESSION START
            PUSHS int@1
            PUSHS GF@$pc
            CALL &add_op
        # EXPRESSION END

        POPS GF@$pc
    # EXPR ASS END

    JUMP ?while_start_1
    LABEL ?while_end_1
# WHILE END

EXIT int@0

# USER FUNCTIONS START
    # FUNC [setData] DEF START
        LABEL setData
        CREATEFRAME
        PUSHFRAME
        # FUNCTION PARAMS START
            # CHECK ARG COUNT START
                POPS GF@_tmp
                JUMPIFEQ ?setData?arg_count_ok GF@_tmp int@3
                EXIT int@4
                LABEL ?setData?arg_count_ok
            # CHECK ARG COUNT END

            # INIT PARAMS, CHECK PARAM TYPES START
                DEFVAR LF@$data
                POPS LF@$data
                TYPE GF@_tmp_type LF@$data
                JUMPIFEQ ?setData?$data?param_type_ok GF@_tmp_type string@string
                EXIT int@4
                LABEL ?setData?$data?param_type_ok
                DEFVAR LF@$ptr
                POPS LF@$ptr
                TYPE GF@_tmp_type LF@$ptr
                JUMPIFEQ ?setData?$ptr?param_type_ok GF@_tmp_type string@int
                EXIT int@4
                LABEL ?setData?$ptr?param_type_ok
                DEFVAR LF@$value
                POPS LF@$value
                TYPE GF@_tmp_type LF@$value
                JUMPIFEQ ?setData?$value?param_type_ok GF@_tmp_type string@int
                EXIT int@4
                LABEL ?setData?$value?param_type_ok
            # INIT PARAMS, CHECK PARAM TYPES END

        # FUNCTION PARAMS END
        # DEFINE USED VARS START
            DEFVAR LF@$dataLen
            DEFVAR LF@$data1
            DEFVAR LF@$ptrCont
            DEFVAR LF@$data2
            DEFVAR LF@$chr
            DEFVAR LF@$out
        # DEFINE USED VARS END

        # FUNC ASS START
            # CALL FUNC [strlen] START
                JUMPIFEQ ?strlen?func_def_ok_102 GF@?strlen?defined bool@true
                EXIT int@3
                LABEL ?strlen?func_def_ok_102
                # CHECK FUNC ARG INIT START
                    # CHECK VAR [$data] INIT START
                        TYPE GF@_tmp LF@$data
                        JUMPIFNEQ ?$data?var_init_ok_103 GF@_tmp string@
                        EXIT int@5
                        LABEL ?$data?var_init_ok_103
                    # CHECK VAR [$data] INIT END

                # CHECK FUNC ARG INIT END

                PUSHS LF@$data
                PUSHS int@1
                CALL strlen
            # CALL FUNC [strlen] END

            POPS LF@$dataLen
        # FUNC ASS END

        # FUNC ASS START
            # CALL FUNC [ssubstr] START
                JUMPIFEQ ?ssubstr?func_def_ok_104 GF@?ssubstr?defined bool@true
                EXIT int@3
                LABEL ?ssubstr?func_def_ok_104
                # CHECK FUNC ARG INIT START
                    # CHECK VAR [$data] INIT START
                        TYPE GF@_tmp LF@$data
                        JUMPIFNEQ ?$data?var_init_ok_105 GF@_tmp string@
                        EXIT int@5
                        LABEL ?$data?var_init_ok_105
                    # CHECK VAR [$data] INIT END

                    # CHECK VAR [$ptr] INIT START
                        TYPE GF@_tmp LF@$ptr
                        JUMPIFNEQ ?$ptr?var_init_ok_106 GF@_tmp string@
                        EXIT int@5
                        LABEL ?$ptr?var_init_ok_106
                    # CHECK VAR [$ptr] INIT END

                # CHECK FUNC ARG INIT END

                PUSHS LF@$ptr
                PUSHS int@0
                PUSHS LF@$data
                PUSHS int@3
                CALL ssubstr
            # CALL FUNC [ssubstr] END

            POPS LF@$data1
        # FUNC ASS END

        # EXPR ASS START
            # CHECK EXPR VARS INIT START
                # CHECK VAR [$ptr] INIT START
                    TYPE GF@_tmp LF@$ptr
                    JUMPIFNEQ ?$ptr?var_init_ok_107 GF@_tmp string@
                    EXIT int@5
                    LABEL ?$ptr?var_init_ok_107
                # CHECK VAR [$ptr] INIT END

            # CHECK EXPR VARS INIT END

            # EXPRESSION START
                PUSHS int@1
                PUSHS LF@$ptr
                CALL &add_op
            # EXPRESSION END

            POPS LF@$ptrCont
        # EXPR ASS END

        # FUNC ASS START
            # CALL FUNC [ssubstr] START
                JUMPIFEQ ?ssubstr?func_def_ok_108 GF@?ssubstr?defined bool@true
                EXIT int@3
                LABEL ?ssubstr?func_def_ok_108
                # CHECK FUNC ARG INIT START
                    # CHECK VAR [$data] INIT START
                        TYPE GF@_tmp LF@$data
                        JUMPIFNEQ ?$data?var_init_ok_109 GF@_tmp string@
                        EXIT int@5
                        LABEL ?$data?var_init_ok_109
                    # CHECK VAR [$data] INIT END

                    # CHECK VAR [$ptrCont] INIT START
                        TYPE GF@_tmp LF@$ptrCont
                        JUMPIFNEQ ?$ptrCont?var_init_ok_110 GF@_tmp string@
                        EXIT int@5
                        LABEL ?$ptrCont?var_init_ok_110
                    # CHECK VAR [$ptrCont] INIT END

                    # CHECK VAR [$dataLen] INIT START
                        TYPE GF@_tmp LF@$dataLen
                        JUMPIFNEQ ?$dataLen?var_init_ok_111 GF@_tmp string@
                        EXIT int@5
                        LABEL ?$dataLen?var_init_ok_111
                    # CHECK VAR [$dataLen] INIT END

                # CHECK FUNC ARG INIT END

                PUSHS LF@$dataLen
                PUSHS LF@$ptrCont
                PUSHS LF@$data
                PUSHS int@3
                CALL ssubstr
            # CALL FUNC [ssubstr] END

            POPS LF@$data2
        # FUNC ASS END

        # FUNC ASS START
            # CALL FUNC [chr] START
                JUMPIFEQ ?chr?func_def_ok_112 GF@?chr?defined bool@true
                EXIT int@3
                LABEL ?chr?func_def_ok_112
                # CHECK FUNC ARG INIT START
                    # CHECK VAR [$value] INIT START
                        TYPE GF@_tmp LF@$value
                        JUMPIFNEQ ?$value?var_init_ok_113 GF@_tmp string@
                        EXIT int@5
                        LABEL ?$value?var_init_ok_113
                    # CHECK VAR [$value] INIT END

                # CHECK FUNC ARG INIT END

                PUSHS LF@$value
                PUSHS int@1
                CALL chr
            # CALL FUNC [chr] END

            POPS LF@$chr
        # FUNC ASS END

        # EXPR ASS START
            # CHECK EXPR VARS INIT START
                # CHECK VAR [$data2] INIT START
                    TYPE GF@_tmp LF@$data2
                    JUMPIFNEQ ?$data2?var_init_ok_114 GF@_tmp string@
                    EXIT int@5
                    LABEL ?$data2?var_init_ok_114
                # CHECK VAR [$data2] INIT END

                # CHECK VAR [$chr] INIT START
                    TYPE GF@_tmp LF@$chr
                    JUMPIFNEQ ?$chr?var_init_ok_115 GF@_tmp string@
                    EXIT int@5
                    LABEL ?$chr?var_init_ok_115
                # CHECK VAR [$chr] INIT END

                # CHECK VAR [$data1] INIT START
                    TYPE GF@_tmp LF@$data1
                    JUMPIFNEQ ?$data1?var_init_ok_116 GF@_tmp string@
                    EXIT int@5
                    LABEL ?$data1?var_init_ok_116
                # CHECK VAR [$data1] INIT END

            # CHECK EXPR VARS INIT END

            # EXPRESSION START
                PUSHS LF@$data2
                PUSHS LF@$chr
                PUSHS LF@$data1
                CALL &concat_op
                CALL &concat_op
            # EXPRESSION END

            POPS LF@$out
        # EXPR ASS END

        # RETURN START
            # CHECK EXPR VARS INIT START
                # CHECK VAR [$out] INIT START
                    TYPE GF@_tmp LF@$out
                    JUMPIFNEQ ?$out?var_init_ok_117 GF@_tmp string@
                    EXIT int@5
                    LABEL ?$out?var_init_ok_117
                # CHECK VAR [$out] INIT END

            # CHECK EXPR VARS INIT END

            # EXPRESSION START
                PUSHS LF@$out
            # EXPRESSION END

            POPS GF@_tmp_res
            PUSHS GF@_tmp_res
            TYPE GF@_tmp_type GF@_tmp_res
            JUMPIFEQ ?setData?end GF@_tmp_type string@string
            EXIT int@4
        # RETURN END

        # MISSING RETURN START
        	EXIT int@4
        # MISSING RETURN END

        LABEL ?setData?end
        POPFRAME
        RETURN
    # FUNC [setData] DEF END

    # FUNC [ssubstr] DEF START
        LABEL ssubstr
        CREATEFRAME
        PUSHFRAME
        # FUNCTION PARAMS START
            # CHECK ARG COUNT START
                POPS GF@_tmp
                JUMPIFEQ ?ssubstr?arg_count_ok GF@_tmp int@3
                EXIT int@4
                LABEL ?ssubstr?arg_count_ok
            # CHECK ARG COUNT END

            # INIT PARAMS, CHECK PARAM TYPES START
                DEFVAR LF@$str
                POPS LF@$str
                TYPE GF@_tmp_type LF@$str
                JUMPIFEQ ?ssubstr?$str?param_type_ok GF@_tmp_type string@string
                EXIT int@4
                LABEL ?ssubstr?$str?param_type_ok
                DEFVAR LF@$start
                POPS LF@$start
                TYPE GF@_tmp_type LF@$start
                JUMPIFEQ ?ssubstr?$start?param_type_ok GF@_tmp_type string@int
                EXIT int@4
                LABEL ?ssubstr?$start?param_type_ok
                DEFVAR LF@$end
                POPS LF@$end
                TYPE GF@_tmp_type LF@$end
                JUMPIFEQ ?ssubstr?$end?param_type_ok GF@_tmp_type string@int
                EXIT int@4
                LABEL ?ssubstr?$end?param_type_ok
            # INIT PARAMS, CHECK PARAM TYPES END

        # FUNCTION PARAMS END
        # DEFINE USED VARS START
            DEFVAR LF@$out
        # DEFINE USED VARS END

        # FUNC ASS START
            # CALL FUNC [substring] START
                JUMPIFEQ ?substring?func_def_ok_118 GF@?substring?defined bool@true
                EXIT int@3
                LABEL ?substring?func_def_ok_118
                # CHECK FUNC ARG INIT START
                    # CHECK VAR [$str] INIT START
                        TYPE GF@_tmp LF@$str
                        JUMPIFNEQ ?$str?var_init_ok_119 GF@_tmp string@
                        EXIT int@5
                        LABEL ?$str?var_init_ok_119
                    # CHECK VAR [$str] INIT END

                    # CHECK VAR [$start] INIT START
                        TYPE GF@_tmp LF@$start
                        JUMPIFNEQ ?$start?var_init_ok_120 GF@_tmp string@
                        EXIT int@5
                        LABEL ?$start?var_init_ok_120
                    # CHECK VAR [$start] INIT END

                    # CHECK VAR [$end] INIT START
                        TYPE GF@_tmp LF@$end
                        JUMPIFNEQ ?$end?var_init_ok_121 GF@_tmp string@
                        EXIT int@5
                        LABEL ?$end?var_init_ok_121
                    # CHECK VAR [$end] INIT END

                # CHECK FUNC ARG INIT END

                PUSHS LF@$end
                PUSHS LF@$start
                PUSHS LF@$str
                PUSHS int@3
                CALL substring
            # CALL FUNC [substring] END

            POPS LF@$out
        # FUNC ASS END

        # IF START
            # CHECK EXPR VARS INIT START
                # CHECK VAR [$out] INIT START
                    TYPE GF@_tmp LF@$out
                    JUMPIFNEQ ?$out?var_init_ok_122 GF@_tmp string@
                    EXIT int@5
                    LABEL ?$out?var_init_ok_122
                # CHECK VAR [$out] INIT END

            # CHECK EXPR VARS INIT END

            # EXPRESSION START
                PUSHS nil@nil
                PUSHS LF@$out
                CALL &neq_op
            # EXPRESSION END

            CALL &to_bool
            POPS GF@_tmp_res
            JUMPIFEQ ?if_branch_false_21 GF@_tmp_res bool@false
            # RETURN START
                # CHECK EXPR VARS INIT START
                    # CHECK VAR [$out] INIT START
                        TYPE GF@_tmp LF@$out
                        JUMPIFNEQ ?$out?var_init_ok_123 GF@_tmp string@
                        EXIT int@5
                        LABEL ?$out?var_init_ok_123
                    # CHECK VAR [$out] INIT END

                # CHECK EXPR VARS INIT END

                # EXPRESSION START
                    PUSHS LF@$out
                # EXPRESSION END

                POPS GF@_tmp_res
                PUSHS GF@_tmp_res
                TYPE GF@_tmp_type GF@_tmp_res
                JUMPIFEQ ?ssubstr?end GF@_tmp_type string@string
                EXIT int@4
            # RETURN END

            JUMP ?if_end_21
            LABEL ?if_branch_false_21
            # RETURN START
                # CHECK EXPR VARS INIT START
                # CHECK EXPR VARS INIT END

                # EXPRESSION START
                    PUSHS string@
                # EXPRESSION END

                POPS GF@_tmp_res
                PUSHS GF@_tmp_res
                TYPE GF@_tmp_type GF@_tmp_res
                JUMPIFEQ ?ssubstr?end GF@_tmp_type string@string
                EXIT int@4
            # RETURN END

            LABEL ?if_end_21
        # IF END

        # MISSING RETURN START
        	EXIT int@4
        # MISSING RETURN END

        LABEL ?ssubstr?end
        POPFRAME
        RETURN
    # FUNC [ssubstr] DEF END

# USER FUNCTIONS END

# BUILT IN FUNCTIONS START
LABEL write												
CREATEFRAME												
PUSHFRAME												
	DEFVAR LF@cur_arg									
														
	# get number of arguments							
	POPS GF@_arg_count									
														
	# iterate over all arguments and print them			
	LABEL ?write?while_start							
	JUMPIFEQ ?write?while_end GF@_arg_count int@0		
														
		SUB GF@_arg_count GF@_arg_count int@1			
		POPS LF@cur_arg									
		WRITE LF@cur_arg								
														
	JUMP ?write?while_start								
	LABEL ?write?while_end								
														
	# return implicit null								
	PUSHS nil@nil										
POPFRAME												
RETURN													

LABEL ord														
	# check if number of arguments is 1							
	POPS GF@_arg_count											
	JUMPIFEQ ?ord?arg_count_ok GF@_arg_count int@1				
		EXIT int@4												
	LABEL ?ord?arg_count_ok										
																
	# get argument												
	POPS GF@_tmp												
																
	# check if parameter type is string							
	TYPE GF@_tmp_type GF@_tmp									
	JUMPIFEQ ?ord?param_type_ok GF@_tmp_type string@string		
		EXIT int@4												
	LABEL ?ord?param_type_ok									
																
	# check if string is not empty								
	JUMPIFEQ ?ord?empty_string GF@_tmp string@					
																
	# string is not empty, return ASCII value of first character
	STRI2INT GF@_tmp GF@_tmp int@0								
	PUSHS GF@_tmp												
	RETURN														
																
	# string is empty, return zero								
	LABEL ?ord?empty_string										
	PUSHS int@0													
	RETURN														

LABEL substring														
CREATEFRAME															
PUSHFRAME															
	# check if number of arguments is 3								
	POPS GF@_arg_count												
	JUMPIFEQ ?substring?arg_count_ok GF@_arg_count int@3			
		EXIT int@4													
	LABEL ?substring?arg_count_ok									
																	
	DEFVAR LF@str													
	POPS LF@str														
	TYPE GF@_tmp_type LF@str										
	JUMPIFEQ ?substring?str?param_type_ok GF@_tmp_type string@string
		EXIT int@4													
	LABEL ?substring?str?param_type_ok								
																	
	DEFVAR LF@i														
	POPS LF@i														
	TYPE GF@_tmp_type LF@i											
	JUMPIFEQ ?substring?i?param_type_ok GF@_tmp_type string@int		
		EXIT int@4													
	LABEL ?substring?i?param_type_ok								
																	
	DEFVAR LF@j														
	POPS LF@j														
	TYPE GF@_tmp_type LF@j											
	JUMPIFEQ ?substring?j?param_type_ok GF@_tmp_type string@int		
		EXIT int@4													
	LABEL ?substring?j?param_type_ok								
																	
	LT GF@_tmp LF@i int@0 # if i < 0 return null					
	JUMPIFEQ ?substring?return_null GF@_tmp bool@true				
																	
	LT GF@_tmp LF@j int@0 # if j < 0								
	JUMPIFEQ ?substring?return_null GF@_tmp bool@true				
																	
	GT GF@_tmp LF@i LF@j # if i > j return null						
	JUMPIFEQ ?substring?return_null GF@_tmp bool@true				
																	
	STRLEN GF@_tmp_res LF@str										
	GT GF@_tmp LF@j GF@_tmp_res # if j > strlen(s) return null		
	JUMPIFEQ ?substring?return_null GF@_tmp bool@true				
	GT GF@_tmp LF@i GF@_tmp_res # if i > strlen(s) return null		
	JUMPIFEQ ?substring?return_null GF@_tmp bool@true				
	EQ GF@_tmp LF@i GF@_tmp_res # if i = strlen(s) return null		
	JUMPIFEQ ?substring?return_null GF@_tmp bool@true				
																	
	MOVE GF@_tmp_res string@										
																	
	LABEL ?substring?while_start									
	JUMPIFEQ ?substring?while_end LF@i LF@j							
																	
		GETCHAR GF@_tmp LF@str LF@i									
		CONCAT GF@_tmp_res GF@_tmp_res GF@_tmp						
		ADD LF@i LF@i int@1											
																	
	JUMP ?substring?while_start										
	LABEL ?substring?while_end										
																	
	PUSHS GF@_tmp_res												
	POPFRAME														
	RETURN															
																	
	LABEL ?substring?return_null									
	PUSHS nil@nil													
	POPFRAME														
	RETURN															

LABEL chr														
	# check if number of arguments is 1							
	POPS GF@_arg_count											
	JUMPIFEQ ?chr?arg_count_ok GF@_arg_count int@1				
		EXIT int@4												
	LABEL ?chr?arg_count_ok										
																
	# get argument												
	POPS GF@_tmp												
																
	# check if parameter type is int							
	TYPE GF@_tmp_type GF@_tmp									
	JUMPIFEQ ?chr?param_type_ok GF@_tmp_type string@int			
		EXIT int@4												
	LABEL ?chr?param_type_ok									
																
	# get and return length of string							
	INT2CHAR GF@_tmp GF@_tmp									
	PUSHS GF@_tmp												
RETURN															

LABEL strlen													
	# check if number of arguments is 1							
	POPS GF@_arg_count											
	JUMPIFEQ ?strlen?arg_count_ok GF@_arg_count int@1			
		EXIT int@4												
	LABEL ?strlen?arg_count_ok									
																
	# get argument												
	POPS GF@_tmp												
																
	# check if parameter type is string							
	TYPE GF@_tmp_type GF@_tmp									
	JUMPIFEQ ?strlen?param_type_ok GF@_tmp_type string@string	
		EXIT int@4												
	LABEL ?strlen?param_type_ok									
																
	# get and return length of string							
	STRLEN GF@_tmp GF@_tmp										
	PUSHS GF@_tmp												
RETURN															

LABEL reads												
CREATEFRAME												
PUSHFRAME												
	# check if number of arguments is 0					
		POPS GF@_arg_count								
		JUMPIFEQ ?reads?arg_count_ok GF@_arg_count int@0
			EXIT int@4									
		LABEL ?reads?arg_count_ok						
														
	# read string from input							
		DEFVAR LF@read_string							
		READ LF@read_string string						
		PUSHS LF@read_string							
POPFRAME												
RETURN													

# BUILT IN FUNCTIONS END

# HELPER FUNCTIONS START
LABEL &to_bool											
	POPS GF@_tmp										
	TYPE GF@_tmp_type GF@_tmp							
														
	JUMPIFNEQ ?&to_bool?next1 GF@_tmp_type string@nil	
		JUMP ?&to_bool?false							
														
	LABEL ?&to_bool?next1								
	JUMPIFNEQ ?&to_bool?next2 GF@_tmp_type string@int	
		JUMPIFEQ ?&to_bool?false GF@_tmp int@0			
		JUMP ?&to_bool?true								
														
	LABEL ?&to_bool?next2								
	JUMPIFNEQ ?&to_bool?next3 GF@_tmp_type string@float	
		JUMPIFEQ ?&to_bool?false GF@_tmp float@0x0p+0	
		JUMP ?&to_bool?true								
														
	LABEL ?&to_bool?next3								
	JUMPIFNEQ ?&to_bool?next4 GF@_tmp_type string@string
		JUMPIFEQ ?&to_bool?false GF@_tmp string@		
		JUMPIFEQ ?&to_bool?false GF@_tmp string@0		
		JUMP ?&to_bool?true								
														
	LABEL ?&to_bool?next4								
		JUMPIFEQ ?&to_bool?false GF@_tmp bool@false		
														
	LABEL ?&to_bool?true								
		PUSHS bool@true									
		RETURN											
														
	LABEL ?&to_bool?false								
		PUSHS bool@false								
		RETURN											

LABEL &add_op
POPS GF@_lhs
TYPE GF@_tlhs GF@_lhs
JUMPIFNEQ ?type_ok_1 GF@_tlhs string@string
EXIT int@7
LABEL ?type_ok_1
JUMPIFNEQ ?skip_nil_conversion_1 GF@_tlhs string@nil
MOVE GF@_lhs int@0
LABEL ?skip_nil_conversion_1
TYPE GF@_tlhs GF@_lhs
POPS GF@_rhs
TYPE GF@_trhs GF@_rhs
JUMPIFNEQ ?type_ok_2 GF@_trhs string@string
EXIT int@7
LABEL ?type_ok_2
JUMPIFNEQ ?skip_nil_conversion_2 GF@_trhs string@nil
MOVE GF@_rhs int@0
LABEL ?skip_nil_conversion_2
TYPE GF@_trhs GF@_rhs
JUMPIFEQ ?add_op?execute GF@_tlhs GF@_trhs
JUMPIFEQ ?add_op?convert_rhs GF@_tlhs string@float
INT2FLOAT GF@_lhs GF@_lhs
JUMP ?add_op?execute
LABEL ?add_op?convert_rhs
INT2FLOAT GF@_rhs GF@_rhs
LABEL ?add_op?execute
ADD GF@_lhs GF@_lhs GF@_rhs
PUSHS GF@_lhs
RETURN



LABEL &mul_op
POPS GF@_lhs
TYPE GF@_tlhs GF@_lhs
JUMPIFNEQ ?type_ok_3 GF@_tlhs string@string
EXIT int@7
LABEL ?type_ok_3
JUMPIFNEQ ?skip_nil_conversion_3 GF@_tlhs string@nil
MOVE GF@_lhs int@0
LABEL ?skip_nil_conversion_3
TYPE GF@_tlhs GF@_lhs
POPS GF@_rhs
TYPE GF@_trhs GF@_rhs
JUMPIFNEQ ?type_ok_4 GF@_trhs string@string
EXIT int@7
LABEL ?type_ok_4
JUMPIFNEQ ?skip_nil_conversion_4 GF@_trhs string@nil
MOVE GF@_rhs int@0
LABEL ?skip_nil_conversion_4
TYPE GF@_trhs GF@_rhs
JUMPIFEQ ?mul_op?execute GF@_tlhs GF@_trhs
JUMPIFEQ ?mul_op?convert_rhs GF@_tlhs string@float
INT2FLOAT GF@_lhs GF@_lhs
JUMP ?mul_op?execute
LABEL ?mul_op?convert_rhs
INT2FLOAT GF@_rhs GF@_rhs
LABEL ?mul_op?execute
MUL GF@_lhs GF@_lhs GF@_rhs
PUSHS GF@_lhs
RETURN



LABEL &sub_op
POPS GF@_lhs
TYPE GF@_tlhs GF@_lhs
JUMPIFNEQ ?type_ok_5 GF@_tlhs string@string
EXIT int@7
LABEL ?type_ok_5
JUMPIFNEQ ?skip_nil_conversion_5 GF@_tlhs string@nil
MOVE GF@_lhs int@0
LABEL ?skip_nil_conversion_5
TYPE GF@_tlhs GF@_lhs
POPS GF@_rhs
TYPE GF@_trhs GF@_rhs
JUMPIFNEQ ?type_ok_6 GF@_trhs string@string
EXIT int@7
LABEL ?type_ok_6
JUMPIFNEQ ?skip_nil_conversion_6 GF@_trhs string@nil
MOVE GF@_rhs int@0
LABEL ?skip_nil_conversion_6
TYPE GF@_trhs GF@_rhs
JUMPIFEQ ?sub_op?execute GF@_tlhs GF@_trhs
JUMPIFEQ ?sub_op?convert_rhs GF@_tlhs string@float
INT2FLOAT GF@_lhs GF@_lhs
JUMP ?sub_op?execute
LABEL ?sub_op?convert_rhs
INT2FLOAT GF@_rhs GF@_rhs
LABEL ?sub_op?execute
SUB GF@_lhs GF@_lhs GF@_rhs
PUSHS GF@_lhs
RETURN



LABEL &div_op
POPS GF@_lhs
TYPE GF@_tlhs GF@_lhs
JUMPIFNEQ ?type_ok_7 GF@_tlhs string@string
EXIT int@7
LABEL ?type_ok_7
JUMPIFNEQ ?skip_nil_conversion_7 GF@_tlhs string@nil
MOVE GF@_lhs int@0
LABEL ?skip_nil_conversion_7
TYPE GF@_tlhs GF@_lhs
JUMPIFEQ ?skip_int_conversion_124 GF@_tlhs string@float
INT2FLOAT GF@_lhs GF@_lhs
LABEL ?skip_int_conversion_124
POPS GF@_rhs
TYPE GF@_trhs GF@_rhs
JUMPIFNEQ ?type_ok_8 GF@_trhs string@string
EXIT int@7
LABEL ?type_ok_8
JUMPIFNEQ ?skip_nil_conversion_8 GF@_trhs string@nil
MOVE GF@_rhs int@0
LABEL ?skip_nil_conversion_8
TYPE GF@_trhs GF@_rhs
JUMPIFEQ ?skip_int_conversion_125 GF@_trhs string@float
INT2FLOAT GF@_rhs GF@_rhs
LABEL ?skip_int_conversion_125
DIV GF@_lhs GF@_lhs GF@_rhs
PUSHS GF@_lhs
RETURN
LABEL &concat_op
POPS GF@_lhs
TYPE GF@_tlhs GF@_lhs
JUMPIFEQ ?type_ok_9 GF@_tlhs string@string
JUMPIFEQ ?type_ok_9 GF@_tlhs string@nil
EXIT int@7
LABEL ?type_ok_9
JUMPIFNEQ ?skip_nil_conversion_9 GF@_tlhs string@nil
MOVE GF@_lhs string@
LABEL ?skip_nil_conversion_9
TYPE GF@_tlhs GF@_lhs
POPS GF@_rhs
TYPE GF@_trhs GF@_rhs
JUMPIFEQ ?type_ok_10 GF@_trhs string@string
JUMPIFEQ ?type_ok_10 GF@_trhs string@nil
EXIT int@7
LABEL ?type_ok_10
JUMPIFNEQ ?skip_nil_conversion_10 GF@_trhs string@nil
MOVE GF@_rhs string@
LABEL ?skip_nil_conversion_10
TYPE GF@_trhs GF@_rhs
CONCAT GF@_lhs GF@_lhs GF@_rhs
PUSHS GF@_lhs
RETURN



LABEL &eq_op
POPS GF@_lhs
TYPE GF@_tlhs GF@_lhs
JUMPIFNEQ ?type_ok_11 GF@_tlhs string@bool
EXIT int@7
LABEL ?type_ok_11
POPS GF@_rhs
TYPE GF@_trhs GF@_rhs
JUMPIFNEQ ?type_ok_12 GF@_trhs string@bool
EXIT int@7
LABEL ?type_ok_12
JUMPIFEQ ?eq_op?execute GF@_tlhs GF@_trhs
MOVE GF@_lhs bool@false
JUMP ?eq_op?end
LABEL ?eq_op?execute
EQ GF@_lhs GF@_lhs GF@_rhs
LABEL ?eq_op?end
PUSHS GF@_lhs
RETURN



LABEL &neq_op
POPS GF@_lhs
TYPE GF@_tlhs GF@_lhs
JUMPIFNEQ ?type_ok_13 GF@_tlhs string@bool
EXIT int@7
LABEL ?type_ok_13
POPS GF@_rhs
TYPE GF@_trhs GF@_rhs
JUMPIFNEQ ?type_ok_14 GF@_trhs string@bool
EXIT int@7
LABEL ?type_ok_14
JUMPIFEQ ?neq_op?execute GF@_tlhs GF@_trhs
MOVE GF@_lhs bool@true
JUMP ?neq_op?end
LABEL ?neq_op?execute
EQ GF@_lhs GF@_lhs GF@_rhs
NOT GF@_lhs GF@_lhs
LABEL ?neq_op?end
PUSHS GF@_lhs
RETURN



LABEL &lt_op
POPS GF@_lhs
TYPE GF@_tlhs GF@_lhs
JUMPIFNEQ ?type_ok_15 GF@_tlhs string@bool
EXIT int@7
LABEL ?type_ok_15
POPS GF@_rhs
TYPE GF@_trhs GF@_rhs
JUMPIFNEQ ?type_ok_16 GF@_trhs string@bool
EXIT int@7
LABEL ?type_ok_16
JUMPIFNEQ ?lt_op?lhs_not_nil GF@_tlhs string@nil
MOVE GF@_lhs bool@false
JUMP ?lt_op?end
LABEL ?lt_op?lhs_not_nil
JUMPIFNEQ ?lt_op?rhs_not_nil GF@_trhs string@nil
MOVE GF@_lhs bool@false
JUMP ?lt_op?end
LABEL ?lt_op?rhs_not_nil
JUMPIFEQ ?lt_op?execute GF@_tlhs GF@_trhs
JUMPIFNEQ ?lt_op?lhs_not_string GF@_tlhs string@string
MOVE GF@_lhs bool@false
JUMP ?lt_op?end
LABEL ?lt_op?lhs_not_string
JUMPIFNEQ ?lt_op?rhs_not_string GF@_trhs string@string
MOVE GF@_lhs bool@false
JUMP ?lt_op?end
LABEL ?lt_op?rhs_not_string
JUMPIFNEQ ?lt_op?skip_lhs_cast GF@_tlhs string@int
INT2FLOAT GF@_lhs GF@_lhs
LABEL ?lt_op?skip_lhs_cast
JUMPIFNEQ ?lt_op?skip_rhs_cast GF@_trhs string@int
INT2FLOAT GF@_rhs GF@_rhs
LABEL ?lt_op?skip_rhs_cast
LABEL ?lt_op?execute
LT GF@_lhs GF@_lhs GF@_rhs
LABEL ?lt_op?end
PUSHS GF@_lhs
RETURN



LABEL &gt_op
POPS GF@_lhs
TYPE GF@_tlhs GF@_lhs
JUMPIFNEQ ?type_ok_17 GF@_tlhs string@bool
EXIT int@7
LABEL ?type_ok_17
POPS GF@_rhs
TYPE GF@_trhs GF@_rhs
JUMPIFNEQ ?type_ok_18 GF@_trhs string@bool
EXIT int@7
LABEL ?type_ok_18
JUMPIFNEQ ?gt_op?lhs_not_nil GF@_tlhs string@nil
MOVE GF@_lhs bool@false
JUMP ?gt_op?end
LABEL ?gt_op?lhs_not_nil
JUMPIFNEQ ?gt_op?rhs_not_nil GF@_trhs string@nil
MOVE GF@_lhs bool@false
JUMP ?gt_op?end
LABEL ?gt_op?rhs_not_nil
JUMPIFEQ ?gt_op?execute GF@_tlhs GF@_trhs
JUMPIFNEQ ?gt_op?lhs_not_string GF@_tlhs string@string
MOVE GF@_lhs bool@false
JUMP ?gt_op?end
LABEL ?gt_op?lhs_not_string
JUMPIFNEQ ?gt_op?rhs_not_string GF@_trhs string@string
MOVE GF@_lhs bool@false
JUMP ?gt_op?end
LABEL ?gt_op?rhs_not_string
JUMPIFNEQ ?gt_op?skip_lhs_cast GF@_tlhs string@int
INT2FLOAT GF@_lhs GF@_lhs
LABEL ?gt_op?skip_lhs_cast
JUMPIFNEQ ?gt_op?skip_rhs_cast GF@_trhs string@int
INT2FLOAT GF@_rhs GF@_rhs
LABEL ?gt_op?skip_rhs_cast
LABEL ?gt_op?execute
GT GF@_lhs GF@_lhs GF@_rhs
LABEL ?gt_op?end
PUSHS GF@_lhs
RETURN



LABEL &lte_op
POPS GF@_lhs
TYPE GF@_tlhs GF@_lhs
JUMPIFNEQ ?type_ok_19 GF@_tlhs string@bool
EXIT int@7
LABEL ?type_ok_19
POPS GF@_rhs
TYPE GF@_trhs GF@_rhs
JUMPIFNEQ ?type_ok_20 GF@_trhs string@bool
EXIT int@7
LABEL ?type_ok_20
JUMPIFNEQ ?lte_op?skip_lhs_nil_conversion GF@_tlhs string@nil
JUMPIFEQ ?lte_op?skip_lhs_to_int_conversion GF@_trhs string@string
JUMPIFEQ ?lte_op?skip_lhs_to_int_conversion GF@_trhs string@float
MOVE GF@_lhs int@0
TYPE GF@_tlhs GF@_lhs
JUMP ?lte_op?skip_lhs_nil_conversion
LABEL ?lte_op?skip_lhs_to_int_conversion
JUMPIFNEQ ?lte_op?skip_lhs_to_string_conversion GF@_trhs string@string
MOVE GF@_lhs string@
TYPE GF@_tlhs GF@_lhs
JUMP ?lte_op?skip_lhs_nil_conversion
LABEL ?lte_op?skip_lhs_to_string_conversion
MOVE GF@_lhs int@0
INT2FLOAT GF@_lhs GF@_lhs
TYPE GF@_tlhs GF@_lhs
LABEL ?lte_op?skip_lhs_nil_conversion
JUMPIFNEQ ?lte_op?skip_rhs_nil_conversion GF@_trhs string@nil
JUMPIFEQ ?lte_op?skip_rhs_to_int_conversion GF@_tlhs string@string
JUMPIFEQ ?lte_op?skip_rhs_to_int_conversion GF@_tlhs string@float
MOVE GF@_rhs int@0
TYPE GF@_trhs GF@_rhs
JUMP ?lte_op?skip_rhs_nil_conversion
LABEL ?lte_op?skip_rhs_to_int_conversion
JUMPIFNEQ ?lte_op?skip_rhs_to_string_conversion GF@_tlhs string@string
MOVE GF@_rhs string@
TYPE GF@_trhs GF@_rhs
JUMP ?lte_op?skip_rhs_nil_conversion
LABEL ?lte_op?skip_rhs_to_string_conversion
MOVE GF@_rhs int@0
INT2FLOAT GF@_rhs GF@_rhs
TYPE GF@_trhs GF@_rhs
LABEL ?lte_op?skip_rhs_nil_conversion
JUMPIFEQ ?lte_op?execute GF@_tlhs GF@_trhs
JUMPIFNEQ ?lte_op?lhs_not_string GF@_tlhs string@string
MOVE GF@_lhs bool@false
JUMP ?lte_op?end
LABEL ?lte_op?lhs_not_string
JUMPIFNEQ ?lte_op?rhs_not_string GF@_trhs string@string
MOVE GF@_lhs bool@false
JUMP ?lte_op?end
LABEL ?lte_op?rhs_not_string
JUMPIFNEQ ?lte_op?skip_lhs_cast GF@_tlhs string@int
INT2FLOAT GF@_lhs GF@_lhs
LABEL ?lte_op?skip_lhs_cast
JUMPIFNEQ ?lte_op?skip_rhs_cast GF@_trhs string@int
INT2FLOAT GF@_rhs GF@_rhs
LABEL ?lte_op?skip_rhs_cast
LABEL ?lte_op?execute
LT GF@_aux1 GF@_lhs GF@_rhs
EQ GF@_lhs GF@_lhs GF@_rhs
OR GF@_lhs GF@_lhs GF@_aux1
LABEL ?lte_op?end
PUSHS GF@_lhs
RETURN



LABEL &gte_op
POPS GF@_lhs
TYPE GF@_tlhs GF@_lhs
JUMPIFNEQ ?type_ok_21 GF@_tlhs string@bool
EXIT int@7
LABEL ?type_ok_21
POPS GF@_rhs
TYPE GF@_trhs GF@_rhs
JUMPIFNEQ ?type_ok_22 GF@_trhs string@bool
EXIT int@7
LABEL ?type_ok_22
JUMPIFNEQ ?gte_op?skip_lhs_nil_conversion GF@_tlhs string@nil
JUMPIFEQ ?gte_op?skip_lhs_to_int_conversion GF@_trhs string@string
JUMPIFEQ ?gte_op?skip_lhs_to_int_conversion GF@_trhs string@float
MOVE GF@_lhs int@0
TYPE GF@_tlhs GF@_lhs
JUMP ?gte_op?skip_lhs_nil_conversion
LABEL ?gte_op?skip_lhs_to_int_conversion
JUMPIFNEQ ?gte_op?skip_lhs_to_string_conversion GF@_trhs string@string
MOVE GF@_lhs string@
TYPE GF@_tlhs GF@_lhs
JUMP ?gte_op?skip_lhs_nil_conversion
LABEL ?gte_op?skip_lhs_to_string_conversion
MOVE GF@_lhs int@0
INT2FLOAT GF@_lhs GF@_lhs
TYPE GF@_tlhs GF@_lhs
LABEL ?gte_op?skip_lhs_nil_conversion
JUMPIFNEQ ?gte_op?skip_rhs_nil_conversion GF@_trhs string@nil
JUMPIFEQ ?gte_op?skip_rhs_to_int_conversion GF@_tlhs string@string
JUMPIFEQ ?gte_op?skip_rhs_to_int_conversion GF@_tlhs string@float
MOVE GF@_rhs int@0
TYPE GF@_trhs GF@_rhs
JUMP ?gte_op?skip_rhs_nil_conversion
LABEL ?gte_op?skip_rhs_to_int_conversion
JUMPIFNEQ ?gte_op?skip_rhs_to_string_conversion GF@_tlhs string@string
MOVE GF@_rhs string@
TYPE GF@_trhs GF@_rhs
JUMP ?gte_op?skip_rhs_nil_conversion
LABEL ?gte_op?skip_rhs_to_string_conversion
MOVE GF@_rhs int@0
INT2FLOAT GF@_rhs GF@_rhs
TYPE GF@_trhs GF@_rhs
LABEL ?gte_op?skip_rhs_nil_conversion
JUMPIFEQ ?gte_op?execute GF@_tlhs GF@_trhs
JUMPIFNEQ ?gte_op?lhs_not_string GF@_tlhs string@string
MOVE GF@_lhs bool@false
JUMP ?gte_op?end
LABEL ?gte_op?lhs_not_string
JUMPIFNEQ ?gte_op?rhs_not_string GF@_trhs string@string
MOVE GF@_lhs bool@false
JUMP ?gte_op?end
LABEL ?gte_op?rhs_not_string
JUMPIFNEQ ?gte_op?skip_lhs_cast GF@_tlhs string@int
INT2FLOAT GF@_lhs GF@_lhs
LABEL ?gte_op?skip_lhs_cast
JUMPIFNEQ ?gte_op?skip_rhs_cast GF@_trhs string@int
INT2FLOAT GF@_rhs GF@_rhs
LABEL ?gte_op?skip_rhs_cast
LABEL ?gte_op?execute
GT GF@_aux1 GF@_lhs GF@_rhs
EQ GF@_lhs GF@_lhs GF@_rhs
OR GF@_lhs GF@_lhs GF@_aux1
LABEL ?gte_op?end
PUSHS GF@_lhs
RETURN



# HELPER FUNCTIONS END

