<program> -> <php_start> <program_body> 
<php_start> -> <?php func_id ( strict_types = int_lit ) ;
<php_end> -> ?> EOF
<php_end> -> EOF
<program_body> -> <func_def> <program_body>
<program_body> -> <stmt> <program_body>
<program_body> -> <stmt_list_bracket_start> <program_body>
<program_body> -> <php_end>
<stmt_list_bracket_end> -> }
<stmt_list_bracket_end> -> <stmt> <stmt_list_bracket_end>
<stmt_list_bracket_end> -> <stmt_list_bracket_start> <stmt_list_bracket_end>
<stmt_list_bracket_start> -> { <stmt_list_bracket_end>
<func_def> -> function func_id ( <param_list> : <return_type> { <stmt_list_bracket_end>
<param_list> -> )
<param_list> -> non_void_type $var_id <param_next>
<param_next> -> )
<param_next> -> , non_void_type $var_id <param_next>
<return_type> -> void
<return_type> -> non_void_type
<stmt> -> if <if_stmt>
<stmt> ->  while <while_stmt>
<stmt> -> return <exp> ;
<stmt> -> func_id <func_call> ;
<if_stmt> -> ( <exp> ) { <stmt_list_bracket_end> else { <stmt_list_bracket_end>
<while_stmt> -> ( <exp> ) { <stmt_list_bracket_end>
<func_call> -> ( <arg_list>
<arg_list> -> )
<arg_list> -> <arg> <arg_next>
<arg_next> -> )
<arg_next> -> , <arg> <arg_next>
<arg> -> $var_id
<arg> -> lit
<stmt> -> <exp>
<stmt> -> var_id <exp/ass_exp/ass_func> ;
<exp/ass_exp/ass_func> -> = <ass_exp/ass_func>
<exp/ass_exp/ass_func> -> <exp>
<ass_exp/ass_func> -> func_id <func_call>
<ass_exp/ass_func> -> <exp>
<exp> -> ( <exp_rest>
<exp> -> ) <exp_rest>
<exp> -> operator <exp_rest>
<exp> -> lit <exp_rest>

lit = str_lit | int_lit | flt_lit | null
operator = *, /, +, -, ., <, >, <=, >=, ===, !==
non_void_type = int, ?int, float, ?float, string, ?string
others = strict_types, :, else, ;
